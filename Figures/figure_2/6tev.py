import numpy as np
import matplotlib.pyplot as plt
from math import log10, floor


def round_to_5(x):
    rounded=[]
    for i in range(len(x)):
        rounded.append(np.round(x[i], 6-int(floor(log10(abs(x[i]))))))
    return np.array(rounded)

bins=round_to_5(np.logspace(np.log10(200), np.log10(4000), 17))
print(bins)
bin_widths=bins[1:17]-bins[0:16]
#bin_widths18=2*np.array([41.1817, 41.1817, 49.6614, 59.8871, 72.2183, 87.0887, 105.021, 126.6458, 152.7232, 184.1698, 222.093, 267.823, 322.97, 389.473, 469.668, 566.377, 682.999, 682.999])
bin_widths18=np.array([41.1817, 41.1817, 49.6614, 59.8871, 72.2183, 87.0887, 105.021, 126.6458, 152.7232, 184.1698, 222.093, 267.823, 322.97, 389.473, 469.668, 566.377, 682.999, 682.999])

#MATRIX

#Not Luxqed
nnlo_centre=2*3000*np.array([11.639249, 11.639249, 7.729473, 4.7885818, 2.7457795, 1.4934067, 0.77596155, 0.39435853, 0.19508005, 0.09217875, 0.041750083, 0.017693144, 0.0070074778, 0.0024744986, 0.0007881118, 0.00020876921, 4.6750177e-05, 4.6750177e-05])
nnlo_min=2*3000*np.array([11.574081, 11.574081, 7.6796326, 4.7573993, 2.7267908, 1.483324, 0.76839547, 0.39008831, 0.19269819, 0.09078098, 0.041046999, 0.017338274, 0.0068520623, 0.0024033081, 0.00076854416, 0.00020196691, 4.5208599e-05, 4.5208599e-05])
nnlo_max=2*3000*np.array([11.731396, 11.731396, 7.7960609, 4.8308317, 2.7736025, 1.5094978, 0.78696075, 0.40081878, 0.19872233, 0.094227497, 0.04278891, 0.018200878, 0.0072271619, 0.0025661723, 0.00081509558, 0.00021702854, 4.8638023e-05, 4.8638023e-05])

print(np.load("../Data/14TeV_HLLHC_veto/mll_14TeV_veto35_sm_qq_nnlo_qcd_centre.npy"))



nnll_centre=2*3000*np.array([11.150373, 11.150373, 7.3867619, 4.5566808, 2.6255537, 1.4291929, 0.7532024, 0.38675708, 0.19254273, 0.092059434, 0.04189052, 0.017929664, 0.0070858654, 0.0025310775, 0.0007943999, 0.00021218175, 4.7375959e-05, 4.7375959e-05])
nnll_min=2*3000*np.array([10.828604, 10.828604, 7.1728176, 4.4250874, 2.5508649, 1.3896091, 0.73089668, 0.37380448, 0.1853024, 0.088201857, 0.039943012, 0.017009147, 0.0066846238, 0.0023733399, 0.00074014481, 0.00019641376, 4.3617234e-05, 4.3617234e-05])
nnll_max=2*3000*np.array([11.7834, 11.7834, 7.8472557, 4.866141, 2.8180305, 1.5409389, 0.81544063, 0.4202804, 0.20992038, 0.1006505, 0.045905587, 0.019682552, 0.0077879912, 0.0027833758, 0.00087343292, 0.0002331316, 5.201315e-05, 5.201315e-05])

nloew_centre=2*3000*np.array([11.511081, 11.511081, 7.7478559, 4.8803813, 2.8699538, 1.5934634, 0.84729179, 0.43744109, 0.21696504, 0.10358812, 0.046169964, 0.019171835, 0.007251576, 0.0024461489, 0.00072137817, 0.00018109279, 3.9797881e-05, 3.9797881e-05])
nloew_min=2*3000*np.array([11.101848, 11.101848, 7.5527253, 4.8098925, 2.8600202, 1.5770128, 0.83060556, 0.42475281, 0.20869729, 0.098700565, 0.043576399, 0.01792186, 0.0067137125, 0.002243168, 0.00065556629, 0.00016339969, 3.5779929e-05, 3.5779929e-05])
nloew_max=2*3000*np.array([11.829411, 11.829411, 7.8898836, 4.9233561, 2.8699538, 1.6055313, 0.86302901, 0.45040619, 0.22576909, 0.10893574, 0.049066372, 0.020592195, 0.0078722222, 0.002683551, 0.00079926396, 0.00020222444, 4.4614433e-05, 4.4614433e-05])

nlophoton_centre=2*3000*np.array([0.19810551, 0.19810551, 0.1538622, 0.11262551, 0.077749794, 0.050374167, 0.030672802, 0.017651956, 0.0096082426, 0.0049169342, 0.002365917, 0.0010634943, 0.00044148895, 0.00016755527, 5.7198414e-05, 1.7122486e-05, 4.3313385e-06, 4.3313385e-06])
nlophoton_min=2*3000*np.array([0.19506661, 0.19506661, 0.15158336, 0.11106255, 0.076730494, 0.049748421, 0.030292895, 0.017432152, 0.009484954, 0.0048507582, 0.0023316198, 0.0010467087, 0.00043386039, 0.00016438463, 5.6035729e-05, 1.6756966e-05, 4.2374953e-06, 4.2374953e-06])
nlophoton_max=2*3000*np.array([0.2001651, 0.2001651, 0.15559145, 0.11393307, 0.078686114, 0.051000369, 0.031083826, 0.017906348, 0.0097590383, 0.0050017041, 0.0024113818, 0.0010863463, 0.00045210895, 0.00017206034, 5.8892686e-05, 1.7673038e-05, 4.479545e-06, 4.479545e-06])


lo_centre=2*3000*np.array([12.295819, 12.295819, 8.3663669, 5.3392747, 3.1931267, 1.810972, 0.988312, 0.52545869, 0.26945906, 0.13331015, 0.062001067, 0.027009104, 0.010798608, 0.0038856795, 0.0012330404, 0.00033741612, 8.1084759e-05, 8.1084759e-05])
lo_min=2*3000*np.array([11.867498, 11.867498, 8.1618383, 5.2663418, 3.1847893, 1.7906044, 0.96785689, 0.50965411, 0.25888112, 0.12685941, 0.058438534, 0.025211081, 0.0099813008, 0.0035565022, 0.0011180083, 0.00030354372, 7.2586503e-05, 7.2586503e-05])
lo_max=2*3000*np.array([12.626357, 12.626357, 8.5132186, 5.3819802, 3.1931267, 1.8263814, 1.0076935, 0.54162471, 0.28072487, 0.14036726, 0.065978877, 0.029051824, 0.011741567, 0.0042706711, 0.0013692046, 0.00037790356, 9.129745e-05, 9.129745e-05])

#nnllnnlo_centre=2*3000*np.array([11.623517, 11.623517, 7.7203157, 4.7806206, 2.7491662, 1.4974718, 0.78218222, 0.39899464, 0.19789303, 0.093939272, 0.042664796, 0.018150663, 0.0071839061, 0.0025471416, 0.00080567233, 0.00021402229, 4.7847383e-05, 4.7847383e-05])
#nnllnnlo_min=2*3000*np.array([11.396022, 11.396022, 7.5641425, 4.6791582, 2.6906606, 1.4649644, 0.76592877, 0.38999645, 0.19285636, 0.091311515, 0.041317897, 0.017519022, 0.0069033241, 0.0024399897, 0.0007657911, 0.00020271582, 4.5065594e-05, 4.5065594e-05])
#nnllnnlo_max=2*3000*np.array([12.051719, 12.051719, 8.0404086, 5.0025255, 2.8897675, 1.5813379, 0.82917606, 0.42456516, 0.21133276, 0.10060741, 0.045816629, 0.0195292, 0.0077458809, 0.0027477634, 0.00087083168, 0.00023125305, 5.1751814e-05, 5.1751814e-05])

nnllnnlo_centre=2*3000*np.array([11.566163, 11.566163, 7.685741, 4.7633813, 2.7397298, 1.491574, 0.77753524, 0.39711564, 0.19630997, 0.093249664, 0.042387383, 0.018042554, 0.0071327232, 0.0025387694, 0.00080482328, 0.00021758338, 5.0093331e-05, 5.0093331e-05])
nnllnnlo_min=2*3000*np.array([11.343429, 11.343429, 7.530978, 4.661844, 2.6812585, 1.4592339, 0.76150776, 0.38794496, 0.19129912, 0.090619762, 0.04103044, 0.017403648, 0.006852311, 0.002429927, 0.00076511136, 0.00020600008, 4.7301851e-05, 4.7301851e-05])
nnllnnlo_max=2*3000*np.array([11.995234, 11.995234, 8.0066247, 4.9861359, 2.8809368, 1.5757553, 0.82449863, 0.42277543, 0.20970162, 0.099909291, 0.045548061, 0.019427594, 0.0076955351, 0.0027415644, 0.00087056858, 0.00023542745, 5.4177057e-05, 5.4177057e-05])



print(np.load("../Data/14TeV_HLLHC_veto/mll_14TeV_veto35_sm_qq_nnllnnlo_qcd_centre.npy"))


gglo_centre=bin_widths18*2*3000*np.array([1.26734e-02, 1.26734e-02, 6.51672e-03, 3.21223e-03, 1.47259e-03, 6.19455e-04, 2.41934e-04, 8.74549e-05, 2.96087e-05, 9.30379e-06, 2.71946e-06, 7.30760e-07, 1.81641e-07, 4.12819e-08, 7.95592e-09, 1.36223e-09, 1.87800e-10, 1.87800e-10])
gglo_min=bin_widths18*2*3000*np.array([1.02503e-02, 1.02503e-02, 5.22883e-03, 2.56007e-03, 1.16561e-03, 4.87075e-04, 1.88706e-04, 6.77802e-05, 2.28442e-05, 7.10102e-06, 2.07397e-06, 5.53029e-07, 1.36147e-07, 3.07377e-08, 5.90257e-09, 1.00963e-09, 1.34663e-10, 1.34663e-10])
gglo_max=bin_widths18*2*3000*np.array([1.58875e-02, 1.58875e-02, 8.24098e-03, 4.09774e-03, 1.89183e-03, 8.02629e-04, 3.15717e-04, 1.15084e-04, 3.92605e-05, 1.24067e-05, 3.66317e-06, 9.86425e-07, 2.47132e-07, 5.69607e-08, 1.10466e-08, 1.92877e-09, 2.60394e-10, 2.60394e-10])

logg_050_050=bin_widths18*2*3000*np.array([1.26734e-02, 1.26734e-02, 6.51672e-03, 3.21223e-03, 1.47259e-03, 6.19455e-04, 2.41934e-04, 8.74549e-05, 2.96087e-05, 9.30379e-06, 2.71946e-06, 7.30760e-07, 1.81641e-07, 4.12819e-08, 7.95592e-09, 1.36223e-09, 1.87800e-10, 1.87800e-10])
logg_025_025=bin_widths18*2*3000*np.array([1.58875e-02, 1.58875e-02, 8.24098e-03, 4.09774e-03, 1.89183e-03, 8.02629e-04, 3.15717e-04, 1.15084e-04, 3.92605e-05, 1.24067e-05, 3.66317e-06, 9.86425e-07, 2.47132e-07, 5.69607e-08, 1.10466e-08, 1.92877e-09, 2.60394e-10, 2.60394e-10])
logg_025_050=bin_widths18*2*3000*np.array([1.56012e-02, 1.56012e-02, 7.98134e-03, 3.91806e-03, 1.78818e-03, 7.49127e-04, 2.90886e-04, 1.04808e-04, 3.53847e-05, 1.10487e-05, 3.23288e-06, 8.63918e-07, 2.13426e-07, 4.85242e-08, 9.28585e-09, 1.58722e-09, 2.14542e-10, 2.14542e-10])
logg_050_025=bin_widths18*2*3000*np.array([1.29095e-02, 1.29095e-02, 6.72850e-03, 3.36053e-03, 1.55841e-03, 6.64207e-04, 2.62179e-04, 9.59271e-05, 3.29172e-05, 1.04162e-05, 3.08957e-06, 8.35024e-07, 2.09916e-07, 4.81687e-08, 9.69241e-09, 1.66101e-09, 2.24881e-10, 2.24881e-10])
logg_050_100=bin_widths18*2*3000*np.array([1.23607e-02, 1.23607e-02, 6.28102e-03, 3.06425e-03, 1.38981e-03, 5.79001e-04, 2.23203e-04, 8.01353e-05, 2.68570e-05, 8.31448e-06, 2.42857e-06, 6.39549e-07, 1.58446e-07, 3.56380e-08, 6.86714e-09, 1.14965e-09, 1.53773e-10, 1.53773e-10])
logg_100_050=bin_widths18*2*3000*np.array([1.05096e-02, 1.05096e-02, 5.42571e-03, 2.68417e-03, 1.23493e-03, 5.21104e-04, 2.04321e-04, 7.40782e-05, 2.51907e-05, 7.93016e-06, 2.32975e-06, 6.28961e-07, 1.55893e-07, 3.57670e-08, 6.87201e-09, 1.18523e-09, 1.61603e-10, 1.61603e-10])
logg_100_100=bin_widths18*2*3000*np.array([1.02503e-02, 1.02503e-02, 5.22883e-03, 2.56007e-03, 1.16561e-03, 4.87075e-04, 1.88706e-04, 6.77802e-05, 2.28442e-05, 7.10102e-06, 2.07397e-06, 5.53029e-07, 1.36147e-07, 3.07377e-08, 5.90257e-09, 1.00963e-09, 1.34663e-10, 1.34663e-10])




ggnll_centre=bin_widths18*2*3000*np.array([6.45544e-03, 6.45544e-03, 3.07100e-03, 1.40140e-03, 5.90418e-04, 2.27091e-04, 8.05973e-05, 2.63558e-05, 8.09415e-06, 2.27812e-06, 5.99358e-07, 1.44374e-07, 3.21025e-08, 6.41989e-09, 1.17816e-09, 1.85236e-10, 2.29779e-11, 2.29779e-11])
ggnll_min=bin_widths18*2*3000*np.array([5.48801e-03, 5.48801e-03, 2.59680e-03, 1.17376e-03, 4.90662e-04, 1.87089e-04, 6.57041e-05, 2.13273e-05, 6.46158e-06, 1.80141e-06, 4.67080e-07, 1.11173e-07, 2.44243e-08, 4.80111e-09, 8.72933e-10, 1.32022e-10, 1.59206e-11, 1.59206e-11])
ggnll_max=bin_widths18*2*3000*np.array([7.80447e-03, 7.80447e-03, 3.68548e-03, 1.68809e-03, 7.21053e-04, 2.81473e-04, 1.01219e-04, 3.38626e-05, 1.04788e-05, 3.02858e-06, 8.09445e-07, 1.99010e-07, 4.47757e-08, 9.19993e-09, 1.76740e-09, 2.74790e-10, 3.72237e-11, 3.72237e-11])

ggnll_050050050=bin_widths18*2*3000*np.array([6.45544e-03, 6.45544e-03, 3.07100e-03, 1.40140e-03, 5.90418e-04, 2.27091e-04, 8.05973e-05, 2.63558e-05, 8.09415e-06, 2.27812e-06, 5.99358e-07, 1.44374e-07, 3.21025e-08, 6.41989e-09, 1.17816e-09, 1.85236e-10, 2.29779e-11, 2.29779e-11])
ggnll_050050025=bin_widths18*2*3000*np.array([7.69860e-03, 7.69860e-03, 3.63274e-03, 1.63955e-03, 6.83733e-04, 2.60289e-04, 9.11968e-05, 2.94857e-05, 8.92076e-06, 2.48392e-06, 6.41026e-07, 1.52984e-07, 3.30940e-08, 6.58106e-09, 1.18220e-09, 1.78093e-10, 2.15456e-11, 2.15456e-11])
ggnll_050050100=bin_widths18*2*3000*np.array([6.86841e-03, 6.86841e-03, 3.33433e-03, 1.54048e-03, 6.57648e-04, 2.56413e-04, 9.28084e-05, 3.08854e-05, 9.54617e-06, 2.82411e-06, 8.09445e-07, 1.86222e-07, 4.09492e-08, 8.96161e-09, 1.60058e-09, 2.51474e-10, 3.70995e-11, 3.70995e-11])
ggnll_025025050=bin_widths18*2*3000*np.array([7.59995e-03, 7.59995e-03, 3.65937e-03, 1.68809e-03, 7.21053e-04, 2.81473e-04, 1.01219e-04, 3.38626e-05, 1.04788e-05, 3.02858e-06, 8.05588e-07, 1.99010e-07, 4.47757e-08, 9.19993e-09, 1.76740e-09, 2.74790e-10, 3.72237e-11, 3.72237e-11])
ggnll_025050050=bin_widths18*2*3000*np.array([7.80447e-03, 7.80447e-03, 3.68548e-03, 1.66873e-03, 6.97816e-04, 2.66678e-04, 9.39193e-05, 3.04925e-05, 9.27850e-06, 2.59614e-06, 6.76043e-07, 1.61675e-07, 3.57428e-08, 7.08296e-09, 1.29198e-09, 2.01124e-10, 2.47067e-11, 2.47067e-11])
ggnll_050025050=bin_widths18*2*3000*np.array([6.28935e-03, 6.28935e-03, 3.05154e-03, 1.41993e-03, 6.10339e-04, 2.39609e-04, 8.71017e-05, 2.91820e-05, 9.13828e-06, 2.65651e-06, 7.14206e-07, 1.76607e-07, 4.02455e-08, 8.39720e-09, 1.58206e-09, 2.58328e-10, 3.36677e-11, 3.36677e-11])
ggnll_050100050=bin_widths18*2*3000*np.array([6.46548e-03, 6.46548e-03, 3.03112e-03, 1.35953e-03, 5.63672e-04, 2.13314e-04, 7.42661e-05, 2.38500e-05, 7.17279e-06, 1.97854e-06, 5.08833e-07, 1.20783e-07, 2.58628e-08, 5.16238e-09, 9.25514e-10, 1.38877e-10, 1.67378e-11, 1.67378e-11])
ggnll_100050050=bin_widths18*2*3000*np.array([5.48801e-03, 5.48801e-03, 2.63624e-03, 1.21283e-03, 5.13861e-04, 1.99346e-04, 7.12471e-05, 2.35256e-05, 7.28787e-06, 2.07030e-06, 5.47813e-07, 1.34830e-07, 2.97420e-08, 6.08524e-09, 1.12387e-09, 1.73717e-10, 2.23835e-11, 2.23835e-11])
ggnll_100100050=bin_widths18*2*3000*np.array([5.49776e-03, 5.49776e-03, 2.59680e-03, 1.17376e-03, 4.90662e-04, 1.87089e-04, 6.57041e-05, 2.13273e-05, 6.46158e-06, 1.80141e-06, 4.67080e-07, 1.11173e-07, 2.44243e-08, 4.80111e-09, 8.72933e-10, 1.32022e-10, 1.59206e-11, 1.59206e-11])

print("gg centre")
print(ggnll_050050050/6000)



nloew_1=2*3000*np.array([11.511081, 11.511081, 7.7478559, 4.8803813, 2.8699538, 1.5934634, 0.84729179, 0.43744109, 0.21696504, 0.10358812, 0.046169964, 0.019171835, 0.007251576, 0.0024461489, 0.00072137817, 0.00018109279, 3.9797881e-05, 3.9797881e-05])
nloew_05=2*3000*np.array([11.101848, 11.101848, 7.5527253, 4.8098925, 2.8600202, 1.6055313, 0.86302901, 0.45040619, 0.22576909, 0.10893574, 0.049066372, 0.020592195, 0.0078722222, 0.002683551, 0.00079926396, 0.00020222444, 4.4614433e-05, 4.4614433e-05])
nloew_2=2*3000*np.array([11.829411, 11.829411, 7.8898836, 4.9233561, 2.867654, 1.5770128, 0.83060556, 0.42475281, 0.20869729, 0.098700565, 0.043576399, 0.01792186, 0.0067137125, 0.002243168, 0.00065556629, 0.00016339969, 3.5779929e-05, 3.5779929e-05])

 

nlophoton_1=2*3000*np.array([0.19810551, 0.19810551, 0.1538622, 0.11262551, 0.077749794, 0.050374167, 0.030672802, 0.017651956, 0.0096082426, 0.0049169342, 0.002365917, 0.0010634943, 0.00044148895, 0.00016755527, 5.7198414e-05, 1.7122486e-05, 4.3313385e-06, 4.3313385e-06])
nlophoton_05=2*3000*np.array([0.2001651, 0.2001651, 0.15559145, 0.11393307, 0.078686114, 0.051000369, 0.031083826, 0.017906348, 0.0097590383, 0.0050017041, 0.0024113818, 0.0010863463, 0.00045210895, 0.00017206034, 5.8892686e-05, 1.7673038e-05, 4.479545e-06, 4.479545e-06])
nlophoton_2=2*3000*np.array([0.19506661, 0.19506661, 0.15158336, 0.11106255, 0.076730494, 0.049748421, 0.030292895, 0.017432152, 0.009484954, 0.0048507582, 0.0023316198, 0.0010467087, 0.00043386039, 0.00016438463, 5.6035729e-05, 1.6756966e-05, 4.2374953e-06, 4.2374953e-06])



lo_1=2*3000*np.array([12.295819, 12.295819, 8.3663669, 5.3392747, 3.1931267, 1.810972, 0.988312, 0.52545869, 0.26945906, 0.13331015, 0.062001067, 0.027009104, 0.010798608, 0.0038856795, 0.0012330404, 0.00033741612, 8.1084759e-05, 8.1084759e-05])
lo_05=2*3000*np.array([11.867498, 11.867498, 8.1618383, 5.2663418, 3.1847893, 1.8263814, 1.0076935, 0.54162471, 0.28072487, 0.14036726, 0.065978877, 0.029051824, 0.011741567, 0.0042706711, 0.0013692046, 0.00037790356, 9.129745e-05, 9.129745e-05])
lo_2=2*3000*np.array([12.626357, 12.626357, 8.5132186, 5.3819802, 3.1878335, 1.7906044, 0.96785689, 0.50965411, 0.25888112, 0.12685941, 0.058438534, 0.025211081, 0.0099813008, 0.0035565022, 0.0011180083, 0.00030354372, 7.2586503e-05, 7.2586503e-05])

nloew_centre=2*3000*np.array([11.511081, 11.511081, 7.7478559, 4.8803813, 2.8699538, 1.5934634, 0.84729179, 0.43744109, 0.21696504, 0.10358812, 0.046169964, 0.019171835, 0.007251576, 0.0024461489, 0.00072137817, 0.00018109279, 3.9797881e-05, 3.9797881e-05])
nloew_min=2*3000*np.array([11.101848, 11.101848, 7.5527253, 4.8098925, 2.8600202, 1.5770128, 0.83060556, 0.42475281, 0.20869729, 0.098700565, 0.043576399, 0.01792186, 0.0067137125, 0.002243168, 0.00065556629, 0.00016339969, 3.5779929e-05, 3.5779929e-05])
nloew_max=2*3000*np.array([11.829411, 11.829411, 7.8898836, 4.9233561, 2.8699538, 1.6055313, 0.86302901, 0.45040619, 0.22576909, 0.10893574, 0.049066372, 0.020592195, 0.0078722222, 0.002683551, 0.00079926396, 0.00020222444, 4.4614433e-05, 4.4614433e-05])

nlophoton_centre=2*3000*np.array([0.19810551, 0.19810551, 0.1538622, 0.11262551, 0.077749794, 0.050374167, 0.030672802, 0.017651956, 0.0096082426, 0.0049169342, 0.002365917, 0.0010634943, 0.00044148895, 0.00016755527, 5.7198414e-05, 1.7122486e-05, 4.3313385e-06, 4.3313385e-06])
nlophoton_min=2*3000*np.array([0.19506661, 0.19506661, 0.15158336, 0.11106255, 0.076730494, 0.049748421, 0.030292895, 0.017432152, 0.009484954, 0.0048507582, 0.0023316198, 0.0010467087, 0.00043386039, 0.00016438463, 5.6035729e-05, 1.6756966e-05, 4.2374953e-06, 4.2374953e-06])
nlophoton_max=2*3000*np.array([0.2001651, 0.2001651, 0.15559145, 0.11393307, 0.078686114, 0.051000369, 0.031083826, 0.017906348, 0.0097590383, 0.0050017041, 0.0024113818, 0.0010863463, 0.00045210895, 0.00017206034, 5.8892686e-05, 1.7673038e-05, 4.479545e-06, 4.479545e-06])

lo_centre=2*3000*np.array([12.295819, 12.295819, 8.3663669, 5.3392747, 3.1931267, 1.810972, 0.988312, 0.52545869, 0.26945906, 0.13331015, 0.062001067, 0.027009104, 0.010798608, 0.0038856795, 0.0012330404, 0.00033741612, 8.1084759e-05, 8.1084759e-05])
lo_min=2*3000*np.array([11.867498, 11.867498, 8.1618383, 5.2663418, 3.1847893, 1.7906044, 0.96785689, 0.50965411, 0.25888112, 0.12685941, 0.058438534, 0.025211081, 0.0099813008, 0.0035565022, 0.0011180083, 0.00030354372, 7.2586503e-05, 7.2586503e-05])
lo_max=2*3000*np.array([12.626357, 12.626357, 8.5132186, 5.3819802, 3.1931267, 1.8263814, 1.0076935, 0.54162471, 0.28072487, 0.14036726, 0.065978877, 0.029051824, 0.011741567, 0.0042706711, 0.0013692046, 0.00037790356, 9.129745e-05, 9.129745e-05])


del_nloew_1=nloew_1/lo_1


nnllnnlonloew_centre=nnllnnlo_centre*del_nloew_1
nnllnnlonloew_min=nnllnnlo_min*del_nloew_1
nnllnnlonloew_max=nnllnnlo_max*del_nloew_1


nnlonloew_centre=nnlo_centre*del_nloew_1
nnlonloew_min=nnlo_min*del_nloew_1
nnlonloew_max=nnlo_max*del_nloew_1


print("nnllnnlonloew centre")
print(nnllnnlonloew_centre/6000)


bin_centres=(bins[0:16] + bins[1:17])/2
bin_centres=np.concatenate((np.array([0]), bin_centres, np.array([5000])))



ggphoton_nll_050050050=ggnll_050050050+nlophoton_1
ggphoton_nll_050050025=ggnll_050050025+nlophoton_1
ggphoton_nll_050050100=ggnll_050050100+nlophoton_1
ggphoton_nll_025025050=ggnll_025025050+nlophoton_05
ggphoton_nll_025050050=ggnll_025050050+nlophoton_1
ggphoton_nll_050025050=ggnll_050025050+nlophoton_05
ggphoton_nll_050100050=ggnll_050100050+nlophoton_2
ggphoton_nll_100050050=ggnll_100050050+nlophoton_1
ggphoton_nll_100100050=ggnll_100100050+nlophoton_2


ggphoton_nll_min=[]
ggphoton_nll_max=[]

for i in range(0, len(ggphoton_nll_050050050)):
    values=[ggphoton_nll_050050050[i], ggphoton_nll_050050025[i], ggphoton_nll_050050100[i], ggphoton_nll_025025050[i], ggphoton_nll_025050050[i], ggphoton_nll_050025050[i], ggphoton_nll_050100050[i], ggphoton_nll_100050050[i], ggphoton_nll_100100050[i]]
    ggphoton_nll_min.append(np.min(values))
    ggphoton_nll_max.append(np.max(values))

ggphoton_nll_min=np.array(ggphoton_nll_min)
ggphoton_nll_max=np.array(ggphoton_nll_max)

ggphoton_nll_err=(ggphoton_nll_max-ggphoton_nll_min)/2

err_qq=(nnllnnlonloew_max-nnllnnlonloew_min)/2

err_sm=(err_qq**2 + ggphoton_nll_err**2)**0.5


sm=nnllnnlonloew_centre+ggphoton_nll_050050050
sm_min=sm-err_sm
sm_max=sm+err_sm

print("sm")
print(sm/6000)

print("sm min")
print(sm_min/6000)
print("sm max")
print(sm_max/6000)

plt.figure()
plt.step(bin_centres, sm/nnllnnlonloew_centre, color='b', where='mid', label=r'\mathrm{SM}')
plt.fill_between(bin_centres, sm_min/nnllnnlonloew_centre, sm_max/nnllnnlonloew_centre,
                     color='b', alpha=0.2, step='mid')


plt.step(bin_centres, nnllnnlonloew_centre/nnllnnlonloew_centre, color='r', where='mid', label='qq')
plt.fill_between(bin_centres, nnllnnlonloew_min/nnllnnlonloew_centre, nnllnnlonloew_max/nnllnnlonloew_centre,
                     color='r', alpha=0.2, step='mid')

plt.semilogx()
plt.xlim(200,4000)              
plt.tight_layout()
plt.savefig("sm.pdf")



kgnll_centre=bin_widths18*2*3000*np.array([-2.19165e-04, -2.19165e-04, 2.89010e-04, 4.45866e-04, 3.79314e-04, 2.40002e-04, 1.27387e-04, 5.96322e-05, 2.50229e-05, 9.57010e-06, 3.36930e-06, 1.07386e-06, 3.07916e-07, 7.91587e-08, 1.80135e-08, 3.45774e-09, 5.28709e-10, 5.28709e-10])
kgnll_min=bin_widths18*2*3000*np.array([-2.88756e-04, -2.88756e-04, 2.50636e-04, 3.97627e-04, 3.36972e-04, 2.11347e-04, 1.11216e-04, 5.14727e-05, 2.12915e-05, 8.04650e-06, 2.80897e-06, 8.68222e-07, 2.43204e-07, 6.11714e-08, 1.35333e-08, 2.52665e-09, 3.62435e-10, 3.62435e-10])
kgnll_max=bin_widths18*2*3000*np.array([-1.67219e-04, -1.67219e-04, 3.48967e-04, 5.18446e-04, 4.38232e-04, 2.82904e-04, 1.52154e-04, 7.26373e-05, 3.11393e-05, 1.21606e-05, 4.35883e-06, 1.42940e-06, 4.18602e-07, 1.10545e-07, 2.58964e-08, 5.17758e-09, 8.46762e-10, 8.46762e-10])

kgnll_050050050=bin_widths18*2*3000*np.array([-2.19165e-04, -2.19165e-04, 2.89010e-04, 4.45866e-04, 3.79314e-04, 2.40002e-04, 1.27387e-04, 5.96322e-05, 2.50229e-05, 9.57010e-06, 3.36930e-06, 1.07386e-06, 3.07916e-07, 7.91587e-08, 1.80135e-08, 3.45774e-09, 5.28709e-10, 5.28709e-10])
kgnll_050050025=bin_widths18*2*3000*np.array([-2.88756e-04, -2.88756e-04, 3.19933e-04, 5.07001e-04, 4.29754e-04, 2.69470e-04, 1.41667e-04, 6.54794e-05, 2.71152e-05, 1.02322e-05, 3.56605e-06, 1.10407e-06, 3.12554e-07, 7.89559e-08, 1.74920e-08, 3.29171e-09, 4.77291e-10, 4.77291e-10])
kgnll_050050100=bin_widths18*2*3000*np.array([-1.89318e-04, -1.89318e-04, 3.48967e-04, 5.18446e-04, 4.38232e-04, 2.82904e-04, 1.52154e-04, 7.26373e-05, 3.11393e-05, 1.21606e-05, 4.35883e-06, 1.42940e-06, 4.18602e-07, 1.10545e-07, 2.58964e-08, 5.17758e-09, 8.46762e-10, 8.46762e-10])
kgnll_025025050=bin_widths18*2*3000*np.array([-1.93947e-04, -1.93947e-04, 3.43819e-04, 5.10512e-04, 4.32106e-04, 2.78491e-04, 1.49459e-04, 7.11696e-05, 3.04597e-05, 1.18716e-05, 4.24548e-06, 1.38658e-06, 4.05275e-07, 1.06388e-07, 2.49325e-08, 4.99484e-09, 8.07781e-10, 8.07781e-10])
kgnll_025050050=bin_widths18*2*3000*np.array([-2.51347e-04, -2.51347e-04, 3.03275e-04, 4.73771e-04, 4.02960e-04, 2.54214e-04, 1.34198e-04, 6.25209e-05, 2.60611e-05, 9.92163e-06, 3.47723e-06, 1.10078e-06, 3.14171e-07, 8.00184e-08, 1.82055e-08, 3.47115e-09, 5.21118e-10, 5.21118e-10])
kgnll_050025050=bin_widths18*2*3000*np.array([-1.67219e-04, -1.67219e-04, 3.25691e-04, 4.81485e-04, 4.06945e-04, 2.63253e-04, 1.41906e-04, 6.79395e-05, 2.92093e-05, 1.14425e-05, 4.11555e-06, 1.35419e-06, 3.97591e-07, 1.05255e-07, 2.47747e-08, 4.97469e-09, 8.14373e-10, 8.14373e-10])
kgnll_050100050=bin_widths18*2*3000*np.array([-2.54900e-04, -2.54900e-04, 2.56122e-04, 4.13401e-04, 3.50212e-04, 2.18589e-04, 1.14414e-04, 5.25429e-05, 2.16424e-05, 8.11934e-06, 2.80897e-06, 8.68222e-07, 2.43204e-07, 6.11714e-08, 1.35333e-08, 2.52665e-09, 3.62435e-10, 3.62435e-10])
kgnll_100050050=bin_widths18*2*3000*np.array([-1.92242e-04, -1.92242e-04, 2.83036e-04, 4.29557e-04, 3.64661e-04, 2.32289e-04, 1.23856e-04, 5.83351e-05, 2.46325e-05, 9.49180e-06, 3.35929e-06, 1.08100e-06, 3.11509e-07, 8.04798e-08, 1.84982e-08, 3.57660e-09, 5.56879e-10, 5.56879e-10])
kgnll_100100050=bin_widths18*2*3000*np.array([-2.27533e-04, -2.27533e-04, 2.50636e-04, 3.97627e-04, 3.36972e-04, 2.11347e-04, 1.11216e-04, 5.14727e-05, 2.12915e-05, 8.04650e-06, 2.81364e-06, 8.71079e-07, 2.46464e-07, 6.24761e-08, 1.39099e-08, 2.62012e-09, 3.80812e-10, 3.80812e-10])


ktnll_centre=bin_widths18*2*3000*np.array([-3.02721e-04, -3.02721e-04, -1.79555e-04, -8.05798e-05, -3.40412e-05, -1.29989e-05, -4.84631e-06, -2.16437e-06, -7.38563e-07, -2.74471e-07, -8.66453e-08, -1.94005e-08, -5.17277e-09, -8.30928e-10, -1.70192e-10, -3.69397e-11, -6.27460e-12, -6.27460e-12])
ktnll_min=bin_widths18*2*3000*np.array([-3.62943e-04, -3.62943e-04, -2.15621e-04, -1.00533e-04, -4.15096e-05, -1.60230e-05, -6.17564e-06, -2.62183e-06, -9.99208e-07, -2.94954e-07, -1.34656e-07, -2.76197e-08, -8.45179e-09, -1.62662e-09, -2.85884e-10, -5.51855e-11, -6.27460e-12, -6.27460e-12])
ktnll_max=bin_widths18*2*3000*np.array([-2.55988e-04, -2.55988e-04, -1.49300e-04, -6.81513e-05, -2.67420e-05, -1.01592e-05, -4.47794e-06, -1.56595e-06, -6.29124e-07, -1.72325e-07, -5.24847e-08, -1.56178e-08, -4.31690e-09, -5.75973e-10, -9.79553e-11, -2.86073e-11, -1.41985e-12, -1.41985e-12])



ktnll_050050050=bin_widths18*2*3000*np.array([-3.02721e-04, -3.02721e-04, -1.79555e-04, -8.05798e-05, -3.40412e-05, -1.29989e-05, -4.84631e-06, -2.16437e-06, -7.38563e-07, -2.74471e-07, -8.66453e-08, -1.94005e-08, -5.17277e-09, -8.30928e-10, -1.70192e-10, -3.69397e-11, -6.27460e-12, -6.27460e-12])
ktnll_050050025=bin_widths18*2*3000*np.array([-3.58069e-04, -3.58069e-04, -2.09813e-04, -9.35761e-05, -4.08057e-05, -1.41959e-05, -5.87472e-06, -2.03499e-06, -8.43800e-07, -2.39439e-07, -7.64253e-08, -2.54055e-08, -6.11601e-09, -7.45368e-10, -1.66646e-10, -5.51855e-11, -4.04542e-12, -4.04542e-12])
ktnll_050050100=bin_widths18*2*3000*np.array([-3.26522e-04, -3.26522e-04, -1.93656e-04, -9.23786e-05, -3.72482e-05, -1.50063e-05, -5.38624e-06, -2.62183e-06, -9.76666e-07, -2.94954e-07, -1.03004e-07, -2.70340e-08, -7.83324e-09, -1.43033e-09, -2.85884e-10, -4.19477e-11, -5.59435e-12, -5.59435e-12])
ktnll_025025050=bin_widths18*2*3000*np.array([-3.62943e-04, -3.62943e-04, -2.07735e-04, -1.00533e-04, -4.05014e-05, -1.60230e-05, -6.13236e-06, -2.45409e-06, -9.99208e-07, -2.85938e-07, -1.34656e-07, -2.76197e-08, -8.45179e-09, -1.62662e-09, -2.62783e-10, -5.41351e-11, -1.41985e-12, -1.41985e-12])
ktnll_025050050=bin_widths18*2*3000*np.array([-3.55433e-04, -3.55433e-04, -2.15621e-04, -9.67803e-05, -4.15096e-05, -1.46710e-05, -6.17564e-06, -2.21812e-06, -8.17093e-07, -2.80518e-07, -8.94796e-08, -2.03670e-08, -5.93078e-09, -7.69424e-10, -1.97134e-10, -4.90243e-11, -3.30195e-12, -3.30195e-12])
ktnll_050025050=bin_widths18*2*3000*np.array([-2.90600e-04, -2.90600e-04, -1.76788e-04, -8.41201e-05, -3.46254e-05, -1.39421e-05, -5.58957e-06, -2.28208e-06, -9.63510e-07, -2.75647e-07, -1.11821e-07, -2.25514e-08, -7.83101e-09, -1.31918e-09, -2.34553e-10, -5.05404e-11, -5.88778e-12, -5.88778e-12])
ktnll_050100050=bin_widths18*2*3000*np.array([-3.03833e-04, -3.03833e-04, -1.71509e-04, -7.83127e-05, -3.30604e-05, -1.26423e-05, -5.22966e-06, -1.71112e-06, -6.88242e-07, -1.89335e-07, -6.17582e-08, -1.56178e-08, -4.73763e-09, -5.75973e-10, -9.79553e-11, -4.01008e-11, -4.01048e-12, -4.01048e-12])
ktnll_100050050=bin_widths18*2*3000*np.array([-2.57150e-04, -2.57150e-04, -1.50781e-04, -7.15705e-05, -2.67420e-05, -1.07424e-05, -4.50695e-06, -2.12539e-06, -7.19380e-07, -1.72325e-07, -9.32176e-08, -1.77796e-08, -4.31690e-09, -1.27172e-09, -1.33563e-10, -2.86073e-11, -5.87197e-12, -5.87197e-12])
ktnll_100100050=bin_widths18*2*3000*np.array([-2.55988e-04, -2.55988e-04, -1.49300e-04, -6.81513e-05, -2.81451e-05, -1.01592e-05, -4.47794e-06, -1.56595e-06, -6.29124e-07, -1.99015e-07, -5.24847e-08, -1.75082e-08, -4.57682e-09, -6.02749e-10, -1.06274e-10, -3.58009e-11, -4.25812e-12, -4.25812e-12])







kg2nll_centre=bin_widths18*2*3000*np.array([2.05311e-02, 2.05311e-02, 1.55555e-02, 1.11830e-02, 7.64573e-03, 4.96550e-03, 3.06030e-03, 1.78264e-03, 9.77798e-04, 5.02934e-04, 2.40219e-04, 1.05364e-04, 4.21729e-05, 1.50760e-05, 4.72868e-06, 1.25731e-06, 2.70180e-07, 2.70180e-07])
kg2nll_min=bin_widths18*2*3000*np.array([1.99581e-02, 1.99581e-02, 1.48659e-02, 1.05177e-02, 7.06253e-03, 4.50727e-03, 2.72585e-03, 1.55822e-03, 8.38467e-04, 4.22860e-04, 1.97400e-04, 8.48396e-05, 3.31627e-05, 1.15716e-05, 3.51505e-06, 9.07285e-07, 1.86974e-07, 1.86974e-07])
kg2nll_max=bin_widths18*2*3000*np.array([2.40466e-02, 2.40466e-02, 1.80207e-02, 1.28244e-02, 8.87217e-03, 5.87484e-03, 3.69202e-03, 2.19548e-03, 1.22942e-03, 6.45188e-04, 3.15594e-04, 1.41847e-04, 5.80916e-05, 2.14032e-05, 6.92478e-06, 1.90193e-06, 4.26862e-07, 4.26862e-07])

kg2nll_050050050=bin_widths18*2*3000*np.array([2.05311e-02, 2.05311e-02, 1.55555e-02, 1.11830e-02, 7.64573e-03, 4.96550e-03, 3.06030e-03, 1.78264e-03, 9.77798e-04, 5.02934e-04, 2.40219e-04, 1.05364e-04, 4.21729e-05, 1.50760e-05, 4.72868e-06, 1.25731e-06, 2.70180e-07, 2.70180e-07])
kg2nll_050050025=bin_widths18*2*3000*np.array([2.40466e-02, 2.40466e-02, 1.80207e-02, 1.28244e-02, 8.66307e-03, 5.56166e-03, 3.38316e-03, 1.94586e-03, 1.05297e-03, 5.34398e-04, 2.50862e-04, 1.08474e-04, 4.26481e-05, 1.49611e-05, 4.57790e-06, 1.18750e-06, 2.46125e-07, 2.46125e-07])
kg2nll_050050100=bin_widths18*2*3000*np.array([2.25658e-02, 2.25658e-02, 1.73907e-02, 1.27385e-02, 8.87217e-03, 5.87484e-03, 3.69202e-03, 2.19548e-03, 1.22942e-03, 6.45188e-04, 3.15594e-04, 1.41847e-04, 5.80916e-05, 2.14032e-05, 6.92478e-06, 1.90193e-06, 4.26862e-07, 4.26862e-07])
kg2nll_025025050=bin_widths18*2*3000*np.array([2.02833e-02, 2.02833e-02, 1.56280e-02, 1.14445e-02, 7.96877e-03, 5.27421e-03, 3.31269e-03, 1.96918e-03, 1.10187e-03, 5.77959e-04, 2.82465e-04, 1.26891e-04, 5.19240e-05, 1.91114e-05, 6.17896e-06, 1.69459e-06, 3.80077e-07, 3.80077e-07])
kg2nll_025050050=bin_widths18*2*3000*np.array([2.00426e-02, 2.00426e-02, 1.51422e-02, 1.08532e-02, 7.39693e-03, 4.78817e-03, 2.94095e-03, 1.70709e-03, 9.32966e-04, 4.78091e-04, 2.27488e-04, 9.93950e-05, 3.96284e-05, 1.41104e-05, 4.40831e-06, 1.16750e-06, 2.49909e-07, 2.49909e-07])
kg2nll_050025050=bin_widths18*2*3000*np.array([2.07827e-02, 2.07827e-02, 1.60586e-02, 1.17953e-02, 8.23890e-03, 5.47092e-03, 3.44796e-03, 2.05682e-03, 1.15509e-03, 6.08122e-04, 2.98334e-04, 1.34539e-04, 5.52693e-05, 2.04230e-05, 6.62930e-06, 1.82530e-06, 4.10985e-07, 4.10985e-07])
kg2nll_050100050=bin_widths18*2*3000*np.array([1.99581e-02, 1.99581e-02, 1.48659e-02, 1.05177e-02, 7.06253e-03, 4.50727e-03, 2.72585e-03, 1.55822e-03, 8.38467e-04, 4.22860e-04, 1.97400e-04, 8.48396e-05, 3.31627e-05, 1.15716e-05, 3.51505e-06, 9.07285e-07, 1.86974e-07, 1.86974e-07])
kg2nll_100050050=bin_widths18*2*3000*np.array([2.12341e-02, 2.12341e-02, 1.61554e-02, 1.16655e-02, 8.01253e-03, 5.22880e-03, 3.23873e-03, 1.89633e-03, 1.04567e-03, 5.40771e-04, 2.59723e-04, 1.14561e-04, 4.61147e-05, 1.65798e-05, 5.23023e-06, 1.39863e-06, 3.02233e-07, 3.02233e-07])
kg2nll_100100050=bin_widths18*2*3000*np.array([2.06356e-02, 2.06356e-02, 1.54347e-02, 1.09683e-02, 7.39915e-03, 4.74491e-03, 2.88397e-03, 1.65714e-03, 8.96442e-04, 4.54555e-04, 2.13376e-04, 9.22233e-05, 3.62535e-05, 1.27230e-05, 3.88707e-06, 1.00902e-06, 2.09114e-07, 2.09114e-07])


k1nll_centre=bin_widths18*2*3000*np.array([1.59212e-04, 1.59212e-04, 1.29513e-04, 9.80926e-05, 6.98666e-05, 4.70936e-05, 3.01405e-05, 1.83206e-05, 1.05589e-05, 5.75137e-06, 2.94132e-06, 1.40106e-06, 6.15831e-07, 2.46780e-07, 8.82450e-08, 2.75321e-08, 7.18378e-09, 7.18378e-09])
k1nll_min=bin_widths18*2*3000*np.array([1.45937e-04, 1.45937e-04, 1.17612e-04, 8.82840e-05, 6.22917e-05, 4.15825e-05, 2.63429e-05, 1.58385e-05, 9.02880e-06, 4.85850e-06, 2.45431e-06, 1.15004e-06, 4.94808e-07, 1.93468e-07, 6.74779e-08, 2.04300e-08, 5.14575e-09, 5.14575e-09])
k1nll_max=bin_widths18*2*3000*np.array([1.86105e-04, 1.86105e-04, 1.50004e-04, 1.12596e-04, 8.07200e-05, 5.53356e-05, 3.60073e-05, 2.22824e-05, 1.30852e-05, 7.26708e-06, 3.78964e-06, 1.84511e-06, 8.29861e-07, 3.40677e-07, 1.25386e-07, 4.04435e-08, 1.09635e-08, 1.09635e-08])


k1nll_050050050=bin_widths18*2*3000*np.array([1.59212e-04, 1.59212e-04, 1.29513e-04, 9.80926e-05, 6.98666e-05, 4.70936e-05, 3.01405e-05, 1.83206e-05, 1.05589e-05, 5.75137e-06, 2.94132e-06, 1.40106e-06, 6.15831e-07, 2.46780e-07, 8.82450e-08, 2.75321e-08, 7.18378e-09, 7.18378e-09])
k1nll_050050025=bin_widths18*2*3000*np.array([1.86105e-04, 1.86105e-04, 1.50004e-04, 1.12596e-04, 7.94176e-05, 5.29923e-05, 3.35523e-05, 2.01597e-05, 1.14834e-05, 6.17478e-06, 3.11569e-06, 1.46332e-06, 6.33279e-07, 2.49058e-07, 8.73739e-08, 2.66078e-08, 6.74429e-09, 6.74429e-09])
k1nll_050050100=bin_widths18*2*3000*np.array([1.75643e-04, 1.75643e-04, 1.45065e-04, 1.11554e-04, 8.07200e-05, 5.53356e-05, 3.60073e-05, 2.22824e-05, 1.30852e-05, 7.26708e-06, 3.78964e-06, 1.84511e-06, 8.29861e-07, 3.40677e-07, 1.25386e-07, 4.04435e-08, 1.09635e-08, 1.09635e-08])
k1nll_025025050=bin_widths18*2*3000*np.array([1.74354e-04, 1.74354e-04, 1.43687e-04, 1.10278e-04, 7.96269e-05, 5.44687e-05, 3.53759e-05, 2.18400e-05, 1.27969e-05, 7.09281e-06, 3.68962e-06, 1.79259e-06, 8.04438e-07, 3.29461e-07, 1.21028e-07, 3.89165e-08, 1.05287e-08, 1.05287e-08])
k1nll_025050050=bin_widths18*2*3000*np.array([1.71606e-04, 1.71606e-04, 1.38986e-04, 1.04794e-04, 7.43010e-05, 4.98597e-05, 3.17577e-05, 1.92110e-05, 1.10163e-05, 5.97018e-06, 3.03817e-06, 1.43930e-06, 6.29250e-07, 2.50748e-07, 8.92034e-08, 2.76774e-08, 7.18306e-09, 7.18306e-09])
k1nll_050025050=bin_widths18*2*3000*np.array([1.61879e-04, 1.61879e-04, 1.33992e-04, 1.03289e-04, 7.49156e-05, 5.14841e-05, 3.35866e-05, 2.08398e-05, 1.22712e-05, 6.83423e-06, 3.57405e-06, 1.74550e-06, 7.87366e-07, 3.24253e-07, 1.19715e-07, 3.87360e-08, 1.05317e-08, 1.05317e-08])
k1nll_050100050=bin_widths18*2*3000*np.array([1.54371e-04, 1.54371e-04, 1.23752e-04, 9.23983e-05, 6.48414e-05, 4.30414e-05, 2.71094e-05, 1.62007e-05, 9.17916e-06, 4.90782e-06, 2.46243e-06, 1.15004e-06, 4.94808e-07, 1.93468e-07, 6.74779e-08, 2.04300e-08, 5.14575e-09, 5.14575e-09])
k1nll_100050050=bin_widths18*2*3000*np.array([1.50621e-04, 1.50621e-04, 1.23166e-04, 9.37900e-05, 6.71553e-05, 4.55196e-05, 2.93054e-05, 1.79180e-05, 1.03913e-05, 5.69573e-06, 2.93190e-06, 1.40596e-06, 6.22230e-07, 2.51092e-07, 9.04071e-08, 2.84074e-08, 7.46665e-09, 7.46665e-09])
k1nll_100100050=bin_widths18*2*3000*np.array([1.45937e-04, 1.45937e-04, 1.17612e-04, 8.82840e-05, 6.22917e-05, 4.15825e-05, 2.63429e-05, 1.58385e-05, 9.02880e-06, 4.85850e-06, 2.45431e-06, 1.15334e-06, 4.99882e-07, 1.96782e-07, 6.91060e-08, 2.10713e-08, 5.35346e-09, 5.35346e-09])


k2nll_centre=bin_widths18*2*3000*np.array([-8.81354e-04, -8.81354e-04, -6.98996e-04, -5.17048e-04, -3.57729e-04, -2.31886e-04, -1.41296e-04, -8.08031e-05, -4.33036e-05, -2.16673e-05, -1.00559e-05, -4.29340e-06, -1.66894e-06, -5.79663e-07, -1.76162e-07, -4.53670e-08, -9.43312e-09, -9.43312e-09])
k2nll_min=bin_widths18*2*3000*np.array([-1.02526e-03, -1.02526e-03, -8.04746e-04, -5.95303e-04, -4.19229e-04, -2.76714e-04, -1.71768e-04, -1.00166e-04, -5.47679e-05, -2.79864e-05, -1.32705e-05, -5.79777e-06, -2.31018e-06, -8.24562e-07, -2.58079e-07, -6.90427e-08, -1.50056e-08, -1.50056e-08])
k2nll_max=bin_widths18*2*3000*np.array([-8.03741e-04, -8.03741e-04, -6.30859e-04, -4.61991e-04, -3.16146e-04, -2.02789e-04, -1.22168e-04, -6.90405e-05, -3.65545e-05, -1.80559e-05, -8.23843e-06, -3.44312e-06, -1.30747e-06, -4.42471e-07, -1.30851e-07, -3.26524e-08, -6.51950e-09, -6.51950e-09])


k2nll_050050050=bin_widths18*2*3000*np.array([-8.81354e-04, -8.81354e-04, -6.98996e-04, -5.17048e-04, -3.57729e-04, -2.31886e-04, -1.41296e-04, -8.08031e-05, -4.33036e-05, -2.16673e-05, -1.00559e-05, -4.29340e-06, -1.66894e-06, -5.79663e-07, -1.76162e-07, -4.53670e-08, -9.43312e-09, -9.43312e-09])
k2nll_050050025=bin_widths18*2*3000*np.array([-1.02526e-03, -1.02526e-03, -8.04746e-04, -5.89056e-04, -4.02925e-04, -2.58314e-04, -1.55505e-04, -8.78135e-05, -4.64547e-05, -2.29224e-05, -1.04848e-05, -4.40714e-06, -1.68303e-06, -5.72817e-07, -1.70322e-07, -4.27406e-08, -8.57899e-09, -8.57899e-09])
k2nll_050050100=bin_widths18*2*3000*np.array([-9.79640e-04, -9.79640e-04, -7.90872e-04, -5.95303e-04, -4.19229e-04, -2.76714e-04, -1.71768e-04, -1.00166e-04, -5.47679e-05, -2.79864e-05, -1.32705e-05, -5.79777e-06, -2.31018e-06, -8.24562e-07, -2.58079e-07, -6.90427e-08, -1.50056e-08, -1.50056e-08])
k2nll_025025050=bin_widths18*2*3000*np.array([-9.71551e-04, -9.71551e-04, -7.82335e-04, -5.87520e-04, -4.12838e-04, -2.71885e-04, -1.68386e-04, -9.79655e-05, -5.34447e-05, -2.72506e-05, -1.28922e-05, -5.61845e-06, -2.23452e-06, -7.95681e-07, -2.48546e-07, -6.63256e-08, -1.43877e-08, -1.43877e-08])
k2nll_025050050=bin_widths18*2*3000*np.array([-9.47809e-04, -9.47809e-04, -7.47879e-04, -5.50528e-04, -3.78951e-04, -2.44447e-04, -1.48183e-04, -8.43123e-05, -4.49514e-05, -2.23733e-05, -1.03292e-05, -4.38649e-06, -1.69649e-06, -5.85931e-07, -1.77177e-07, -4.53986e-08, -9.39552e-09, -9.39552e-09])
k2nll_050025050=bin_widths18*2*3000*np.array([-9.03739e-04, -9.03739e-04, -7.31603e-04, -5.52129e-04, -3.89886e-04, -2.58043e-04, -1.60626e-04, -9.39344e-05, -5.15096e-05, -2.63989e-05, -1.25546e-05, -5.50178e-06, -2.19865e-06, -7.87211e-07, -2.47126e-07, -6.63097e-08, -1.44553e-08, -1.44553e-08])
k2nll_050100050=bin_widths18*2*3000*np.array([-8.47762e-04, -8.47762e-04, -6.61499e-04, -4.81477e-04, -3.27517e-04, -2.08805e-04, -1.24999e-04, -7.01901e-05, -3.69201e-05, -1.81147e-05, -8.23843e-06, -3.44312e-06, -1.30747e-06, -4.42471e-07, -1.30851e-07, -3.26524e-08, -6.51950e-09, -6.51950e-09])
k2nll_100050050=bin_widths18*2*3000*np.array([-8.35925e-04, -8.35925e-04, -6.67016e-04, -4.96322e-04, -3.45477e-04, -2.25318e-04, -1.38145e-04, -7.95221e-05, -4.28906e-05, -2.16040e-05, -1.00937e-05, -4.33860e-06, -1.69792e-06, -5.93649e-07, -1.81633e-07, -4.70905e-08, -9.85783e-09, -9.85783e-09])
k2nll_100100050=bin_widths18*2*3000*np.array([-8.03741e-04, -8.03741e-04, -6.30859e-04, -4.61991e-04, -3.16146e-04, -2.02789e-04, -1.22168e-04, -6.90405e-05, -3.65545e-05, -1.80559e-05, -8.26732e-06, -3.47787e-06, -1.32965e-06, -4.53077e-07, -1.34903e-07, -3.38684e-08, -6.81457e-09, -6.81457e-09])


k3nll_centre=bin_widths18*2*3000*np.array([-1.51390e-03, -1.51390e-03, -1.21443e-03, -8.99329e-04, -6.16396e-04, -3.94717e-04, -2.37567e-04, -1.34397e-04, -7.13899e-05, -3.54423e-05, -1.63471e-05, -6.94405e-06, -2.68498e-06, -9.28735e-07, -2.81349e-07, -7.22742e-08, -1.49467e-08, -1.49467e-08])
k3nll_min=bin_widths18*2*3000*np.array([-1.76012e-03, -1.76012e-03, -1.39805e-03, -1.03445e-03, -7.21748e-04, -4.70563e-04, -2.88548e-04, -1.66504e-04, -9.02377e-05, -4.57630e-05, -2.15685e-05, -9.37279e-06, -3.71567e-06, -1.32212e-06, -4.12444e-07, -1.09913e-07, -2.37643e-08, -2.37643e-08])
k3nll_max=bin_widths18*2*3000*np.array([-1.37978e-03, -1.37978e-03, -1.09597e-03, -8.03873e-04, -5.45139e-04, -3.45318e-04, -2.05526e-04, -1.14868e-04, -6.02746e-05, -2.95417e-05, -1.33920e-05, -5.56949e-06, -2.10337e-06, -7.09554e-07, -2.08883e-07, -5.19506e-08, -1.03604e-08, -1.03604e-08])



k3nll_050050050=bin_widths18*2*3000*np.array([-1.51390e-03, -1.51390e-03, -1.21443e-03, -8.99329e-04, -6.16396e-04, -3.94717e-04, -2.37567e-04, -1.34397e-04, -7.13899e-05, -3.54423e-05, -1.63471e-05, -6.94405e-06, -2.68498e-06, -9.28735e-07, -2.81349e-07, -7.22742e-08, -1.49467e-08, -1.49467e-08])
k3nll_050050025=bin_widths18*2*3000*np.array([-1.76012e-03, -1.76012e-03, -1.39805e-03, -1.02504e-03, -6.94799e-04, -4.39873e-04, -2.61628e-04, -1.46114e-04, -7.66001e-05, -3.75077e-05, -1.70420e-05, -7.12810e-06, -2.70736e-06, -9.18614e-07, -2.71866e-07, -6.79981e-08, -1.36345e-08, -1.36345e-08])
k3nll_050050100=bin_widths18*2*3000*np.array([-1.68426e-03, -1.68426e-03, -1.37404e-03, -1.03445e-03, -7.21748e-04, -4.70563e-04, -2.88548e-04, -1.66504e-04, -9.02377e-05, -4.57630e-05, -2.15685e-05, -9.37279e-06, -3.71567e-06, -1.32212e-06, -4.12444e-07, -1.09913e-07, -2.37643e-08, -2.37643e-08])
k3nll_025025050=bin_widths18*2*3000*np.array([-1.66991e-03, -1.66991e-03, -1.35934e-03, -1.02107e-03, -7.10852e-04, -4.62397e-04, -2.82889e-04, -1.62872e-04, -8.80684e-05, -4.45576e-05, -2.09521e-05, -9.08514e-06, -3.59354e-06, -1.27577e-06, -3.97148e-07, -1.05616e-07, -2.27762e-08, -2.27762e-08])
k3nll_025050050=bin_widths18*2*3000*np.array([-1.62777e-03, -1.62777e-03, -1.29934e-03, -9.57751e-04, -6.53199e-04, -4.16233e-04, -2.49211e-04, -1.40258e-04, -7.41109e-05, -3.66042e-05, -1.67925e-05, -7.09582e-06, -2.72863e-06, -9.39077e-07, -2.82953e-07, -7.23209e-08, -1.48806e-08, -1.48806e-08])
k3nll_050025050=bin_widths18*2*3000*np.array([-1.55390e-03, -1.55390e-03, -1.27099e-03, -9.59313e-04, -6.71099e-04, -4.38740e-04, -2.69792e-04, -1.56128e-04, -8.48613e-05, -4.31640e-05, -2.04041e-05, -8.89334e-06, -3.53644e-06, -1.26216e-06, -3.94895e-07, -1.05579e-07, -2.28865e-08, -2.28865e-08])
k3nll_050100050=bin_widths18*2*3000*np.array([-1.45498e-03, -1.45498e-03, -1.14916e-03, -8.38059e-04, -5.64946e-04, -3.55688e-04, -2.10362e-04, -1.16818e-04, -6.08893e-05, -2.96444e-05, -1.33920e-05, -5.56949e-06, -2.10337e-06, -7.09554e-07, -2.08883e-07, -5.19506e-08, -1.03604e-08, -1.03604e-08])
k3nll_100050050=bin_widths18*2*3000*np.array([-1.43627e-03, -1.43627e-03, -1.15879e-03, -8.63056e-04, -5.95070e-04, -3.83382e-04, -2.32210e-04, -1.32222e-04, -7.06954e-05, -3.53330e-05, -1.64056e-05, -7.01580e-06, -2.73174e-06, -9.51212e-07, -2.90170e-07, -7.50091e-08, -1.56202e-08, -1.56202e-08])
k3nll_100100050=bin_widths18*2*3000*np.array([-1.37978e-03, -1.37978e-03, -1.09597e-03, -8.03873e-04, -5.45139e-04, -3.45318e-04, -2.05526e-04, -1.14868e-04, -6.02746e-05, -2.95417e-05, -1.34362e-05, -5.62539e-06, -2.13892e-06, -7.26610e-07, -2.15299e-07, -5.38998e-08, -1.08273e-08, -1.08273e-08])

k4nll_centre=bin_widths18*2*3000*np.array([-5.05603e-05, -5.05603e-05, -4.02844e-05, -2.74670e-05, -1.51058e-05, -6.36194e-06, -1.49474e-06, 6.85929e-07, 1.31504e-06, 1.21238e-06, 8.64118e-07, 5.25181e-07, 2.79830e-07, 1.30950e-07, 5.33817e-08, 1.85791e-08, 5.34267e-09, 5.34267e-09])
k4nll_min=bin_widths18*2*3000*np.array([-5.79164e-05, -5.79164e-05, -4.66803e-05, -3.25181e-05, -1.84948e-05, -8.27997e-06, -2.34438e-06, 3.98128e-07, 1.21560e-06, 1.07328e-06, 7.46994e-07, 4.44012e-07, 2.31456e-07, 1.05076e-07, 4.15373e-08, 1.39876e-08, 3.86059e-09, 3.86059e-09])
k4nll_max=bin_widths18*2*3000*np.array([-4.53574e-05, -4.53574e-05, -3.57478e-05, -2.41059e-05, -1.29515e-05, -5.23731e-06, -9.52079e-07, 9.74107e-07, 1.55332e-06, 1.40777e-06, 1.05378e-06, 6.63864e-07, 3.64772e-07, 1.75978e-07, 7.42193e-08, 2.68145e-08, 8.02997e-09, 8.02997e-09])


k4nll_050050050=bin_widths18*2*3000*np.array([-5.05603e-05, -5.05603e-05, -4.02844e-05, -2.74670e-05, -1.51058e-05, -6.36194e-06, -1.49474e-06, 6.85929e-07, 1.31504e-06, 1.21238e-06, 8.64118e-07, 5.25181e-07, 2.79830e-07, 1.30950e-07, 5.33817e-08, 1.85791e-08, 5.34267e-09, 5.34267e-09])
k4nll_050050025=bin_widths18*2*3000*np.array([-5.79164e-05, -5.79164e-05, -4.56055e-05, -3.07415e-05, -1.64884e-05, -6.67501e-06, -1.33038e-06, 9.74107e-07, 1.55332e-06, 1.36858e-06, 9.50616e-07, 5.63944e-07, 2.94303e-07, 1.34646e-07, 5.36069e-08, 1.81836e-08, 5.05057e-09, 5.05057e-09])
k4nll_050050100=bin_widths18*2*3000*np.array([-5.75518e-05, -5.75518e-05, -4.66803e-05, -3.25181e-05, -1.84948e-05, -8.27997e-06, -2.34438e-06, 4.77394e-07, 1.41424e-06, 1.40777e-06, 1.05378e-06, 6.63864e-07, 3.64772e-07, 1.75978e-07, 7.42193e-08, 2.68145e-08, 8.02997e-09, 8.02997e-09])
k4nll_025025050=bin_widths18*2*3000*np.array([-5.68897e-05, -5.68897e-05, -4.60447e-05, -3.19872e-05, -1.81140e-05, -8.05630e-06, -2.23824e-06, 5.06510e-07, 1.40735e-06, 1.38600e-06, 1.03221e-06, 6.47134e-07, 3.54586e-07, 1.70510e-07, 7.16838e-08, 2.58331e-08, 7.71998e-09, 7.71998e-09])
k4nll_025050050=bin_widths18*2*3000*np.array([-5.39779e-05, -5.39779e-05, -4.27874e-05, -2.90023e-05, -1.57975e-05, -6.54649e-06, -1.44604e-06, 8.00065e-07, 1.41560e-06, 1.28147e-06, 9.03738e-07, 5.44239e-07, 2.87793e-07, 1.33623e-07, 5.41060e-08, 1.87314e-08, 5.33853e-09, 5.33853e-09])
k4nll_050025050=bin_widths18*2*3000*np.array([-5.32641e-05, -5.32641e-05, -4.33222e-05, -3.02739e-05, -1.73034e-05, -7.81031e-06, -2.26235e-06, 3.98128e-07, 1.29901e-06, 1.30825e-06, 9.86579e-07, 6.24557e-07, 3.44770e-07, 1.66970e-07, 7.07090e-08, 2.56368e-08, 7.71041e-09, 7.71041e-09])
k4nll_050100050=bin_widths18*2*3000*np.array([-4.74040e-05, -4.74040e-05, -3.71309e-05, -2.48677e-05, -1.32041e-05, -5.23731e-06, -9.52079e-07, 8.55981e-07, 1.28175e-06, 1.10835e-06, 7.60667e-07, 4.47115e-07, 2.31456e-07, 1.05076e-07, 4.15373e-08, 1.39876e-08, 3.86059e-09, 3.86059e-09])
k4nll_100050050=bin_widths18*2*3000*np.array([-4.83429e-05, -4.83429e-05, -3.87536e-05, -2.66148e-05, -1.48010e-05, -6.36337e-06, -1.60013e-06, 5.78951e-07, 1.24011e-06, 1.17245e-06, 8.47893e-07, 5.21211e-07, 2.80422e-07, 1.32419e-07, 5.44759e-08, 1.91092e-08, 5.55001e-09, 5.55001e-09])
k4nll_100100050=bin_widths18*2*3000*np.array([-4.53574e-05, -4.53574e-05, -3.57478e-05, -2.41059e-05, -1.29515e-05, -5.25619e-06, -1.05882e-06, 7.55324e-07, 1.21560e-06, 1.07328e-06, 7.46994e-07, 4.44012e-07, 2.31970e-07, 1.06311e-07, 4.23648e-08, 1.43989e-08, 4.00359e-09, 4.00359e-09])


k5nll_centre=bin_widths18*2*3000*np.array([2.02328e-06, 2.02328e-06, 4.89608e-06, 6.52080e-06, 6.51244e-06, 5.35607e-06, 3.83363e-06, 2.45287e-06, 1.42554e-06, 7.56888e-07, 3.67290e-07, 1.62299e-07, 6.47920e-08, 2.30172e-08, 7.13745e-09, 1.87417e-09, 3.95129e-10, 3.95129e-10])
k5nll_min=bin_widths18*2*3000*np.array([1.69174e-06, 1.69174e-06, 4.29191e-06, 5.75574e-06, 5.72693e-06, 4.67773e-06, 3.31493e-06, 2.09836e-06, 1.20487e-06, 6.31955e-07, 3.01759e-07, 1.30575e-07, 5.09761e-08, 1.76347e-08, 5.31384e-09, 1.34646e-09, 2.76106e-10, 2.76106e-10])
k5nll_max=bin_widths18*2*3000*np.array([2.55458e-06, 2.55458e-06, 5.78649e-06, 7.65981e-06, 7.69360e-06, 6.40474e-06, 4.65760e-06, 3.03444e-06, 1.79727e-06, 9.74295e-07, 4.83254e-07, 2.18569e-07, 8.95177e-08, 3.26941e-08, 1.04448e-08, 2.84157e-09, 6.27227e-10, 6.27227e-10])


k5nll_050050050=bin_widths18*2*3000*np.array([2.02328e-06, 2.02328e-06, 4.89608e-06, 6.52080e-06, 6.51244e-06, 5.35607e-06, 3.83363e-06, 2.45287e-06, 1.42554e-06, 7.56888e-07, 3.67290e-07, 1.62299e-07, 6.47920e-08, 2.30172e-08, 7.13745e-09, 1.87417e-09, 3.95129e-10, 3.95129e-10])
k5nll_050050025=bin_widths18*2*3000*np.array([2.14799e-06, 2.14799e-06, 5.48054e-06, 7.33835e-06, 7.29370e-06, 5.95721e-06, 4.22006e-06, 2.66888e-06, 1.53212e-06, 8.02239e-07, 3.83719e-07, 1.67003e-07, 6.55739e-08, 2.28157e-08, 6.91430e-09, 1.76201e-09, 3.63086e-10, 3.63086e-10])
k5nll_050050100=bin_widths18*2*3000*np.array([2.55458e-06, 2.55458e-06, 5.78649e-06, 7.65981e-06, 7.69360e-06, 6.40474e-06, 4.65760e-06, 3.03444e-06, 1.79727e-06, 9.74295e-07, 4.83254e-07, 2.18569e-07, 8.95177e-08, 3.26941e-08, 1.04448e-08, 2.84157e-09, 6.27227e-10, 6.27227e-10])
k5nll_025025050=bin_widths18*2*3000*np.array([2.48842e-06, 2.48842e-06, 5.69175e-06, 7.54303e-06, 7.56767e-06, 6.29164e-06, 4.56663e-06, 2.96871e-06, 1.75465e-06, 9.49021e-07, 4.69603e-07, 2.11948e-07, 8.65949e-08, 3.15519e-08, 1.00611e-08, 2.73111e-09, 6.00775e-10, 6.00775e-10])
k5nll_025050050=bin_widths18*2*3000*np.array([2.08028e-06, 2.08028e-06, 5.16819e-06, 6.90869e-06, 6.87942e-06, 5.64349e-06, 4.02202e-06, 2.56053e-06, 1.48064e-06, 7.82512e-07, 3.77557e-07, 1.66027e-07, 6.59997e-08, 2.32999e-08, 7.18691e-09, 1.87351e-09, 3.94692e-10, 3.94692e-10])
k5nll_050025050=bin_widths18*2*3000*np.array([2.40301e-06, 2.40301e-06, 5.38755e-06, 7.12343e-06, 7.16546e-06, 5.97646e-06, 4.35501e-06, 2.84478e-06, 1.69132e-06, 9.18568e-07, 4.56912e-07, 2.07319e-07, 8.51347e-08, 3.12113e-08, 1.00026e-08, 2.72728e-09, 6.05751e-10, 6.05751e-10])
k5nll_050100050=bin_widths18*2*3000*np.array([1.69174e-06, 1.69174e-06, 4.43614e-06, 5.95992e-06, 5.91341e-06, 4.81189e-06, 3.39280e-06, 2.13459e-06, 1.21867e-06, 6.34531e-07, 3.01759e-07, 1.30575e-07, 5.09761e-08, 1.76347e-08, 5.31384e-09, 1.34646e-09, 2.76106e-10, 2.76106e-10])
k5nll_100050050=bin_widths18*2*3000*np.array([2.00214e-06, 2.00214e-06, 4.74084e-06, 6.30606e-06, 6.30280e-06, 5.20869e-06, 3.74754e-06, 2.41125e-06, 1.41051e-06, 7.54104e-07, 3.68196e-07, 1.63927e-07, 6.59623e-08, 2.35695e-08, 7.36182e-09, 1.94181e-09, 4.13444e-10, 4.13444e-10])
k5nll_100100050=bin_widths18*2*3000*np.array([1.70409e-06, 1.70409e-06, 4.29191e-06, 5.75574e-06, 5.72693e-06, 4.67773e-06, 3.31493e-06, 2.09836e-06, 1.20487e-06, 6.31955e-07, 3.02358e-07, 1.31682e-07, 5.17144e-08, 1.80403e-08, 5.47199e-09, 1.40061e-09, 2.86154e-10, 2.86154e-10])

k6nll_centre=bin_widths18*2*3000*np.array([-1.59575e-05, -1.59575e-05, -2.65731e-05, -3.08329e-05, -2.86172e-05, -2.25447e-05, -1.56799e-05, -9.82529e-06, -5.62338e-06, -2.95017e-06, -1.41827e-06, -6.22245e-07, -2.47206e-07, -8.73715e-08, -2.69585e-08, -7.03422e-09, -1.48575e-09, -1.48575e-09])
k6nll_min=bin_widths18*2*3000*np.array([-1.91247e-05, -1.91247e-05, -3.10075e-05, -3.60069e-05, -3.37120e-05, -2.69049e-05, -1.90230e-05, -1.21439e-05, -7.08527e-06, -3.79499e-06, -1.86486e-06, -8.37443e-07, -3.40839e-07, -1.23891e-07, -3.94690e-08, -1.06752e-08, -2.35069e-09, -2.35069e-09])
k6nll_max=bin_widths18*2*3000*np.array([-1.38710e-05, -1.38710e-05, -2.35300e-05, -2.73067e-05, -2.52103e-05, -1.97052e-05, -1.35704e-05, -8.41119e-06, -4.75753e-06, -2.46242e-06, -1.16535e-06, -5.00738e-07, -1.94172e-07, -6.69171e-08, -2.00422e-08, -5.07108e-09, -1.03178e-09, -1.03178e-09])


k6nll_050050050=bin_widths18*2*3000*np.array([-1.59575e-05, -1.59575e-05, -2.65731e-05, -3.08329e-05, -2.86172e-05, -2.25447e-05, -1.56799e-05, -9.82529e-06, -5.62338e-06, -2.95017e-06, -1.41827e-06, -6.22245e-07, -2.47206e-07, -8.73715e-08, -2.69585e-08, -7.03422e-09, -1.48575e-09, -1.48575e-09])
k6nll_050050025=bin_widths18*2*3000*np.array([-1.77056e-05, -1.77056e-05, -3.00049e-05, -3.48060e-05, -3.21242e-05, -2.51032e-05, -1.72756e-05, -1.07013e-05, -6.04649e-06, -3.12796e-06, -1.48173e-06, -6.40316e-07, -2.49745e-07, -8.65822e-08, -2.60753e-08, -6.63518e-09, -1.35712e-09, -1.35712e-09])
k6nll_050050100=bin_widths18*2*3000*np.array([-1.91247e-05, -1.91247e-05, -3.10075e-05, -3.60069e-05, -3.37120e-05, -2.69049e-05, -1.90230e-05, -1.21439e-05, -7.08527e-06, -3.79499e-06, -1.86486e-06, -8.37443e-07, -3.40839e-07, -1.23891e-07, -3.94690e-08, -1.06752e-08, -2.35069e-09, -2.35069e-09])
k6nll_025025050=bin_widths18*2*3000*np.array([-1.87809e-05, -1.87809e-05, -3.05492e-05, -3.54762e-05, -3.31731e-05, -2.64383e-05, -1.86527e-05, -1.18831e-05, -6.91778e-06, -3.69690e-06, -1.81227e-06, -8.12009e-07, -3.29683e-07, -1.19583e-07, -3.80042e-08, -1.02627e-08, -2.25246e-09, -2.25246e-09])
k6nll_025050050=bin_widths18*2*3000*np.array([-1.67790e-05, -1.67790e-05, -2.81705e-05, -3.26978e-05, -3.02763e-05, -2.37634e-05, -1.64531e-05, -1.02606e-05, -5.84354e-06, -3.04893e-06, -1.45811e-06, -6.36434e-07, -2.51402e-07, -8.83799e-08, -2.71264e-08, -7.04467e-09, -1.47877e-09, -1.47877e-09])
k6nll_050025050=bin_widths18*2*3000*np.array([-1.78370e-05, -1.78370e-05, -2.88180e-05, -3.34625e-05, -3.13728e-05, -2.50881e-05, -1.77819e-05, -1.13821e-05, -6.65974e-06, -3.57749e-06, -1.76332e-06, -7.94240e-07, -3.24272e-07, -1.18226e-07, -3.77836e-08, -1.02496e-08, -2.26395e-09, -2.26395e-09])
k6nll_050100050=bin_widths18*2*3000*np.array([-1.42355e-05, -1.42355e-05, -2.43955e-05, -2.83177e-05, -2.60694e-05, -2.02881e-05, -1.38952e-05, -8.56102e-06, -4.81037e-06, -2.47436e-06, -1.16535e-06, -5.00738e-07, -1.94172e-07, -6.69171e-08, -2.00422e-08, -5.07108e-09, -1.03178e-09, -1.03178e-09])
k6nll_100050050=bin_widths18*2*3000*np.array([-1.55303e-05, -1.55303e-05, -2.56334e-05, -2.97435e-05, -2.76766e-05, -2.19083e-05, -1.53190e-05, -9.65783e-06, -5.56214e-06, -2.93785e-06, -1.42178e-06, -6.28103e-07, -2.51258e-07, -8.94048e-08, -2.77880e-08, -7.29563e-09, -1.55132e-09, -1.55132e-09])
k6nll_100100050=bin_widths18*2*3000*np.array([-1.38710e-05, -1.38710e-05, -2.35300e-05, -2.73067e-05, -2.52103e-05, -1.97052e-05, -1.35704e-05, -8.41119e-06, -4.75753e-06, -2.46242e-06, -1.16843e-06, -5.05141e-07, -1.97284e-07, -6.85064e-08, -2.06450e-08, -5.25969e-09, -1.07771e-09, -1.07771e-09])


k12nll_centre=bin_widths18*2*3000*np.array([2.13378e-04, 2.13378e-04, 2.66873e-04, 3.13891e-04, 3.47154e-04, 3.61322e-04, 3.56431e-04, 3.35403e-04, 3.02717e-04, 2.61824e-04, 2.16191e-04, 1.69194e-04, 1.24321e-04, 8.44829e-05, 5.21157e-05, 2.83650e-05, 1.30664e-05, 1.30664e-05])
k12nll_min=bin_widths18*2*3000*np.array([1.84390e-04, 1.84390e-04, 2.28586e-04, 2.66358e-04, 2.91509e-04, 3.00401e-04, 2.93494e-04, 2.73718e-04, 2.44669e-04, 2.09351e-04, 1.70880e-04, 1.31971e-04, 9.54936e-05, 6.37587e-05, 3.85290e-05, 2.04499e-05, 9.13673e-06, 9.13673e-06])
k12nll_max=bin_widths18*2*3000*np.array([2.67166e-04, 2.67166e-04, 3.36929e-04, 4.00754e-04, 4.47787e-04, 4.71567e-04, 4.69501e-04, 4.46180e-04, 4.06831e-04, 3.55785e-04, 2.97408e-04, 2.36040e-04, 1.76234e-04, 1.22085e-04, 7.70048e-05, 4.30822e-05, 2.05399e-05, 2.05399e-05])


k12nll_050050050=bin_widths18*2*3000*np.array([2.13378e-04, 2.13378e-04, 2.66873e-04, 3.13891e-04, 3.47154e-04, 3.61322e-04, 3.56431e-04, 3.35403e-04, 3.02717e-04, 2.61824e-04, 2.16191e-04, 1.69194e-04, 1.24321e-04, 8.44829e-05, 5.21157e-05, 2.83650e-05, 1.30664e-05, 1.30664e-05])
k12nll_050050025=bin_widths18*2*3000*np.array([2.30684e-04, 2.30684e-04, 2.86759e-04, 3.35129e-04, 3.67886e-04, 3.80181e-04, 3.72423e-04, 3.48219e-04, 3.12083e-04, 2.67779e-04, 2.19229e-04, 1.69867e-04, 1.23353e-04, 8.26776e-05, 5.01690e-05, 2.67457e-05, 1.20051e-05, 1.20051e-05])
k12nll_050050100=bin_widths18*2*3000*np.array([2.67166e-04, 2.67166e-04, 3.36929e-04, 4.00754e-04, 4.47787e-04, 4.71567e-04, 4.69501e-04, 4.46180e-04, 4.06831e-04, 3.55785e-04, 2.97408e-04, 2.36040e-04, 1.76234e-04, 1.22085e-04, 7.70048e-05, 4.30822e-05, 2.05399e-05, 2.05399e-05])
k12nll_025025050=bin_widths18*2*3000*np.array([2.39409e-04, 2.39409e-04, 3.01882e-04, 3.59008e-04, 4.00988e-04, 4.22156e-04, 4.20208e-04, 3.99200e-04, 3.63888e-04, 3.18127e-04, 2.65831e-04, 2.10891e-04, 1.57382e-04, 1.08966e-04, 6.86887e-05, 3.84035e-05, 1.82956e-05, 1.82956e-05])
k12nll_025050050=bin_widths18*2*3000*np.array([2.03872e-04, 2.03872e-04, 2.54593e-04, 2.98925e-04, 3.30002e-04, 3.42871e-04, 3.37675e-04, 3.17245e-04, 2.85857e-04, 2.46807e-04, 2.03398e-04, 1.58843e-04, 1.16442e-04, 7.89242e-05, 4.85493e-05, 2.63432e-05, 1.20955e-05, 1.20955e-05])
k12nll_050025050=bin_widths18*2*3000*np.array([2.50869e-04, 2.50869e-04, 3.16795e-04, 3.77366e-04, 4.22243e-04, 4.45288e-04, 4.43950e-04, 4.22412e-04, 3.85659e-04, 3.37733e-04, 2.82738e-04, 2.24765e-04, 1.68118e-04, 1.16693e-04, 7.37620e-05, 4.13635e-05, 1.97689e-05, 1.97689e-05])
k12nll_050100050=bin_widths18*2*3000*np.array([1.84390e-04, 1.84390e-04, 2.28586e-04, 2.66358e-04, 2.91509e-04, 3.00401e-04, 2.93494e-04, 2.73718e-04, 2.44669e-04, 2.09351e-04, 1.70880e-04, 1.31971e-04, 9.54936e-05, 6.37587e-05, 3.85290e-05, 2.04499e-05, 9.13673e-06, 9.13673e-06])
k12nll_100050050=bin_widths18*2*3000*np.array([2.27785e-04, 2.27785e-04, 2.85524e-04, 3.36678e-04, 3.73339e-04, 3.89561e-04, 3.85201e-04, 3.63316e-04, 3.28692e-04, 2.85013e-04, 2.35993e-04, 1.85259e-04, 1.36587e-04, 9.31650e-05, 5.77059e-05, 3.15461e-05, 1.46002e-05, 1.46002e-05])
k12nll_100100050=bin_widths18*2*3000*np.array([1.96564e-04, 1.96564e-04, 2.44248e-04, 2.85350e-04, 3.13138e-04, 3.23520e-04, 3.16847e-04, 2.96199e-04, 2.65414e-04, 2.27698e-04, 1.86389e-04, 1.44404e-04, 1.04854e-04, 7.02756e-05, 4.26440e-05, 2.27356e-05, 1.02065e-05, 1.02065e-05])


k22nll_centre=bin_widths18*2*3000*np.array([1.62081e-03, 1.62081e-03, 2.38960e-03, 3.17366e-03, 3.79538e-03, 4.13883e-03, 4.18631e-03, 3.98034e-03, 3.57852e-03, 3.02999e-03, 2.39975e-03, 1.75975e-03, 1.17812e-03, 7.07118e-04, 3.70853e-04, 1.63737e-04, 5.75168e-05, 5.75168e-05])
k22nll_min=bin_widths18*2*3000*np.array([1.45707e-03, 1.45707e-03, 2.11027e-03, 2.74835e-03, 3.23180e-03, 3.47087e-03, 3.46171e-03, 3.25009e-03, 2.88151e-03, 2.40473e-03, 1.87422e-03, 1.35037e-03, 8.86563e-04, 5.20518e-04, 2.66247e-04, 1.14177e-04, 3.87757e-05, 3.87757e-05])
k22nll_max=bin_widths18*2*3000*np.array([1.93781e-03, 1.93781e-03, 2.92160e-03, 3.95242e-03, 4.81703e-03, 5.34457e-03, 5.48315e-03, 5.28524e-03, 4.82200e-03, 4.14661e-03, 3.34082e-03, 2.49679e-03, 1.70748e-03, 1.04987e-03, 5.66226e-04, 2.58499e-04, 9.44076e-05, 9.44076e-05])


k22nll_050050050=bin_widths18*2*3000*np.array([1.62081e-03, 1.62081e-03, 2.38960e-03, 3.17366e-03, 3.79538e-03, 4.13883e-03, 4.18631e-03, 3.98034e-03, 3.57852e-03, 3.02999e-03, 2.39975e-03, 1.75975e-03, 1.17812e-03, 7.07118e-04, 3.70853e-04, 1.63737e-04, 5.75168e-05, 5.75168e-05])
k22nll_050050025=bin_widths18*2*3000*np.array([1.80151e-03, 1.80151e-03, 2.62507e-03, 3.43860e-03, 4.06419e-03, 4.38382e-03, 4.38880e-03, 4.13544e-03, 3.67986e-03, 3.08258e-03, 2.41194e-03, 1.74482e-03, 1.15028e-03, 6.78208e-04, 3.48390e-04, 1.50041e-04, 5.11688e-05, 5.11688e-05])
k22nll_050050100=bin_widths18*2*3000*np.array([1.93781e-03, 1.93781e-03, 2.92160e-03, 3.95242e-03, 4.81703e-03, 5.34457e-03, 5.48315e-03, 5.28524e-03, 4.82200e-03, 4.14661e-03, 3.34082e-03, 2.49679e-03, 1.70748e-03, 1.04987e-03, 5.66226e-04, 2.58499e-04, 9.44076e-05, 9.44076e-05])
k22nll_025025050=bin_widths18*2*3000*np.array([1.73911e-03, 1.73911e-03, 2.62053e-03, 3.54309e-03, 4.31603e-03, 4.78631e-03, 4.90835e-03, 4.72916e-03, 4.31278e-03, 3.70696e-03, 2.98508e-03, 2.22966e-03, 1.52389e-03, 9.36390e-04, 5.04682e-04, 2.30242e-04, 8.40296e-05, 8.40296e-05])
k22nll_025050050=bin_widths18*2*3000*np.array([1.56035e-03, 1.56035e-03, 2.29233e-03, 3.03393e-03, 3.61684e-03, 3.93338e-03, 3.96905e-03, 3.76518e-03, 3.37719e-03, 2.85254e-03, 2.25340e-03, 1.64797e-03, 1.10018e-03, 6.58418e-04, 3.44282e-04, 1.51548e-04, 5.30767e-05, 5.30767e-05])
k22nll_050025050=bin_widths18*2*3000*np.array([1.80772e-03, 1.80772e-03, 2.73343e-03, 3.70879e-03, 4.53228e-03, 5.03994e-03, 5.18076e-03, 5.00276e-03, 4.57270e-03, 3.93979e-03, 3.18058e-03, 2.38200e-03, 1.63253e-03, 1.00603e-03, 5.43816e-04, 2.48835e-04, 9.10818e-05, 9.10818e-05])
k22nll_050100050=bin_widths18*2*3000*np.array([1.45707e-03, 1.45707e-03, 2.11027e-03, 2.74835e-03, 3.23180e-03, 3.47087e-03, 3.46171e-03, 3.25009e-03, 2.88151e-03, 2.40473e-03, 1.87422e-03, 1.35037e-03, 8.86563e-04, 5.20518e-04, 2.66247e-04, 1.14177e-04, 3.87757e-05, 3.87757e-05])
k22nll_100050050=bin_widths18*2*3000*np.array([1.71105e-03, 1.71105e-03, 2.53572e-03, 3.38487e-03, 4.06667e-03, 4.45235e-03, 4.51902e-03, 4.31091e-03, 3.88881e-03, 3.30438e-03, 2.62682e-03, 1.93379e-03, 1.29991e-03, 7.83499e-04, 4.12681e-04, 1.82997e-04, 6.45579e-05, 6.45579e-05])
k22nll_100100050=bin_widths18*2*3000*np.array([1.53707e-03, 1.53707e-03, 2.23759e-03, 2.92895e-03, 3.45992e-03, 3.73060e-03, 3.73371e-03, 3.51726e-03, 3.12912e-03, 2.62078e-03, 2.05035e-03, 1.48313e-03, 9.77737e-04, 5.76492e-04, 2.96162e-04, 1.27564e-04, 4.35110e-05, 4.35110e-05])


k32nll_centre=bin_widths18*2*3000*np.array([1.62807e-03, 1.62807e-03, 2.40412e-03, 3.18796e-03, 3.81181e-03, 4.15755e-03, 4.20347e-03, 3.99708e-03, 3.59351e-03, 3.04188e-03, 2.40907e-03, 1.76635e-03, 1.18237e-03, 7.09524e-04, 3.72082e-04, 1.64248e-04, 5.76951e-05, 5.76951e-05])
k32nll_min=bin_widths18*2*3000*np.array([1.46605e-03, 1.46605e-03, 2.12167e-03, 2.76147e-03, 3.24635e-03, 3.48676e-03, 3.47747e-03, 3.26403e-03, 2.89404e-03, 2.41443e-03, 1.88187e-03, 1.35558e-03, 8.89842e-04, 5.22350e-04, 2.67131e-04, 1.14539e-04, 3.89006e-05, 3.89006e-05])
k32nll_max=bin_widths18*2*3000*np.array([1.94643e-03, 1.94643e-03, 2.93430e-03, 3.96968e-03, 4.83680e-03, 5.36624e-03, 5.50534e-03, 5.30647e-03, 4.84094e-03, 4.16252e-03, 3.35318e-03, 2.50599e-03, 1.71337e-03, 1.05341e-03, 5.68093e-04, 2.59249e-04, 9.46902e-05, 9.46902e-05])


k32nll_050050050=bin_widths18*2*3000*np.array([1.62807e-03, 1.62807e-03, 2.40412e-03, 3.18796e-03, 3.81181e-03, 4.15755e-03, 4.20347e-03, 3.99708e-03, 3.59351e-03, 3.04188e-03, 2.40907e-03, 1.76635e-03, 1.18237e-03, 7.09524e-04, 3.72082e-04, 1.64248e-04, 5.76951e-05, 5.76951e-05])
k32nll_050050025=bin_widths18*2*3000*np.array([1.81249e-03, 1.81249e-03, 2.63909e-03, 3.45488e-03, 4.08218e-03, 4.40361e-03, 4.40854e-03, 4.15297e-03, 3.69571e-03, 3.09491e-03, 2.42171e-03, 1.75150e-03, 1.15451e-03, 6.80586e-04, 3.49543e-04, 1.50516e-04, 5.13332e-05, 5.13332e-05])
k32nll_050050100=bin_widths18*2*3000*np.array([1.94643e-03, 1.94643e-03, 2.93430e-03, 3.96968e-03, 4.83680e-03, 5.36624e-03, 5.50534e-03, 5.30647e-03, 4.84094e-03, 4.16252e-03, 3.35318e-03, 2.50599e-03, 1.71337e-03, 1.05341e-03, 5.68093e-04, 2.59249e-04, 9.46902e-05, 9.46902e-05])
k32nll_025025050=bin_widths18*2*3000*np.array([1.74671e-03, 1.74671e-03, 2.63200e-03, 3.55870e-03, 4.33371e-03, 4.80576e-03, 4.92819e-03, 4.74820e-03, 4.32975e-03, 3.72120e-03, 2.99612e-03, 2.23789e-03, 1.52915e-03, 9.39544e-04, 5.06347e-04, 2.30911e-04, 8.42811e-05, 8.42811e-05])
k32nll_025050050=bin_widths18*2*3000*np.array([1.56737e-03, 1.56737e-03, 2.30638e-03, 3.04771e-03, 3.63263e-03, 3.95134e-03, 3.98546e-03, 3.78113e-03, 3.39144e-03, 2.86380e-03, 2.26220e-03, 1.65418e-03, 1.10417e-03, 6.60665e-04, 3.45426e-04, 1.52022e-04, 5.32415e-05, 5.32415e-05])
k32nll_050025050=bin_widths18*2*3000*np.array([1.81556e-03, 1.81556e-03, 2.74534e-03, 3.72498e-03, 4.55068e-03, 5.06025e-03, 5.20152e-03, 5.02275e-03, 4.59057e-03, 3.95483e-03, 3.19229e-03, 2.39075e-03, 1.63814e-03, 1.00941e-03, 5.45606e-04, 2.49556e-04, 9.13540e-05, 9.13540e-05])
k32nll_050100050=bin_widths18*2*3000*np.array([1.46605e-03, 1.46605e-03, 2.12167e-03, 2.76147e-03, 3.24635e-03, 3.48676e-03, 3.47747e-03, 3.26403e-03, 2.89404e-03, 2.41443e-03, 1.88187e-03, 1.35558e-03, 8.89842e-04, 5.22350e-04, 2.67131e-04, 1.14539e-04, 3.89006e-05, 3.89006e-05])
k32nll_100050050=bin_widths18*2*3000*np.array([1.71867e-03, 1.71867e-03, 2.55094e-03, 3.39993e-03, 4.08407e-03, 4.47223e-03, 4.53733e-03, 4.32883e-03, 3.90495e-03, 3.31724e-03, 2.63695e-03, 1.94100e-03, 1.30457e-03, 7.86153e-04, 4.14043e-04, 1.83566e-04, 6.47579e-05, 6.47579e-05])
k32nll_100100050=bin_widths18*2*3000*np.array([1.54647e-03, 1.54647e-03, 2.24955e-03, 2.94275e-03, 3.47532e-03, 3.74746e-03, 3.75052e-03, 3.53219e-03, 3.14260e-03, 2.63127e-03, 2.05866e-03, 1.48881e-03, 9.81335e-04, 5.78512e-04, 2.97142e-04, 1.27968e-04, 4.36509e-05, 4.36509e-05])

k42nll_centre=bin_widths18*2*3000*np.array([2.13378e-04, 2.13378e-04, 2.66873e-04, 3.13891e-04, 3.47154e-04, 3.61322e-04, 3.56431e-04, 3.35403e-04, 3.02717e-04, 2.61824e-04, 2.16191e-04, 1.69194e-04, 1.24321e-04, 8.44829e-05, 5.21157e-05, 2.83650e-05, 1.30664e-05, 1.30664e-05])
k42nll_min=bin_widths18*2*3000*np.array([1.84390e-04, 1.84390e-04, 2.28586e-04, 2.66358e-04, 2.91509e-04, 3.00401e-04, 2.93494e-04, 2.73718e-04, 2.44669e-04, 2.09351e-04, 1.70880e-04, 1.31971e-04, 9.54936e-05, 6.37587e-05, 3.85290e-05, 2.04499e-05, 9.13673e-06, 9.13673e-06])
k42nll_max=bin_widths18*2*3000*np.array([2.67166e-04, 2.67166e-04, 3.36929e-04, 4.00754e-04, 4.47787e-04, 4.71567e-04, 4.69501e-04, 4.46180e-04, 4.06831e-04, 3.55785e-04, 2.97408e-04, 2.36040e-04, 1.76234e-04, 1.22085e-04, 7.70048e-05, 4.30822e-05, 2.05399e-05, 2.05399e-05])

k42nll_050050050=bin_widths18*2*3000*np.array([2.13378e-04, 2.13378e-04, 2.66873e-04, 3.13891e-04, 3.47154e-04, 3.61322e-04, 3.56431e-04, 3.35403e-04, 3.02717e-04, 2.61824e-04, 2.16191e-04, 1.69194e-04, 1.24321e-04, 8.44829e-05, 5.21157e-05, 2.83650e-05, 1.30664e-05, 1.30664e-05])
k42nll_050050025=bin_widths18*2*3000*np.array([2.30684e-04, 2.30684e-04, 2.86759e-04, 3.35129e-04, 3.67886e-04, 3.80181e-04, 3.72423e-04, 3.48219e-04, 3.12083e-04, 2.67779e-04, 2.19229e-04, 1.69867e-04, 1.23353e-04, 8.26776e-05, 5.01690e-05, 2.67457e-05, 1.20051e-05, 1.20051e-05])
k42nll_050050100=bin_widths18*2*3000*np.array([2.67166e-04, 2.67166e-04, 3.36929e-04, 4.00754e-04, 4.47787e-04, 4.71567e-04, 4.69501e-04, 4.46180e-04, 4.06831e-04, 3.55785e-04, 2.97408e-04, 2.36040e-04, 1.76234e-04, 1.22085e-04, 7.70048e-05, 4.30822e-05, 2.05399e-05, 2.05399e-05])
k42nll_025025050=bin_widths18*2*3000*np.array([2.39409e-04, 2.39409e-04, 3.01882e-04, 3.59008e-04, 4.00988e-04, 4.22156e-04, 4.20208e-04, 3.99200e-04, 3.63888e-04, 3.18127e-04, 2.65831e-04, 2.10891e-04, 1.57382e-04, 1.08966e-04, 6.86887e-05, 3.84035e-05, 1.82956e-05, 1.82956e-05])
k42nll_025050050=bin_widths18*2*3000*np.array([2.03872e-04, 2.03872e-04, 2.54593e-04, 2.98925e-04, 3.30002e-04, 3.42871e-04, 3.37675e-04, 3.17245e-04, 2.85857e-04, 2.46807e-04, 2.03398e-04, 1.58843e-04, 1.16442e-04, 7.89242e-05, 4.85493e-05, 2.63432e-05, 1.20955e-05, 1.20955e-05])
k42nll_050025050=bin_widths18*2*3000*np.array([2.50869e-04, 2.50869e-04, 3.16795e-04, 3.77366e-04, 4.22243e-04, 4.45288e-04, 4.43950e-04, 4.22412e-04, 3.85659e-04, 3.37733e-04, 2.82738e-04, 2.24765e-04, 1.68118e-04, 1.16693e-04, 7.37620e-05, 4.13635e-05, 1.97689e-05, 1.97689e-05])
k42nll_050100050=bin_widths18*2*3000*np.array([1.84390e-04, 1.84390e-04, 2.28586e-04, 2.66358e-04, 2.91509e-04, 3.00401e-04, 2.93494e-04, 2.73718e-04, 2.44669e-04, 2.09351e-04, 1.70880e-04, 1.31971e-04, 9.54936e-05, 6.37587e-05, 3.85290e-05, 2.04499e-05, 9.13673e-06, 9.13673e-06])
k42nll_100050050=bin_widths18*2*3000*np.array([2.27785e-04, 2.27785e-04, 2.85524e-04, 3.36678e-04, 3.73339e-04, 3.89561e-04, 3.85201e-04, 3.63316e-04, 3.28692e-04, 2.85013e-04, 2.35993e-04, 1.85259e-04, 1.36587e-04, 9.31650e-05, 5.77059e-05, 3.15461e-05, 1.46002e-05, 1.46002e-05])
k42nll_100100050=bin_widths18*2*3000*np.array([1.96564e-04, 1.96564e-04, 2.44248e-04, 2.85350e-04, 3.13138e-04, 3.23520e-04, 3.16847e-04, 2.96199e-04, 2.65414e-04, 2.27698e-04, 1.86389e-04, 1.44404e-04, 1.04854e-04, 7.02756e-05, 4.26440e-05, 2.27356e-05, 1.02065e-05, 1.02065e-05])


k52nll_centre=bin_widths18*2*3000*np.array([3.18356e-06, 3.18356e-06, 4.23570e-06, 5.28701e-06, 6.27867e-06, 7.09320e-06, 7.62465e-06, 7.77567e-06, 7.49837e-06, 6.78601e-06, 5.72067e-06, 4.44376e-06, 3.13840e-06, 1.97926e-06, 1.08791e-06, 5.02483e-07, 1.84385e-07, 1.84385e-07])
k52nll_min=bin_widths18*2*3000*np.array([2.88295e-06, 2.88295e-06, 3.77490e-06, 4.65461e-06, 5.45466e-06, 6.07421e-06, 6.43544e-06, 6.46805e-06, 6.13753e-06, 5.46471e-06, 4.52452e-06, 3.44701e-06, 2.38411e-06, 1.46889e-06, 7.86444e-07, 3.52327e-07, 1.24835e-07, 1.24835e-07])
k52nll_max=bin_widths18*2*3000*np.array([3.79080e-06, 3.79080e-06, 5.10713e-06, 6.47675e-06, 7.80210e-06, 8.94838e-06, 9.76048e-06, 1.01141e-05, 9.91779e-06, 9.13795e-06, 7.85072e-06, 6.22588e-06, 4.49958e-06, 2.91079e-06, 1.64769e-06, 7.87529e-07, 3.01070e-07, 3.01070e-07])

k52nll_050050050=bin_widths18*2*3000*np.array([3.18356e-06, 3.18356e-06, 4.23570e-06, 5.28701e-06, 6.27867e-06, 7.09320e-06, 7.62465e-06, 7.77567e-06, 7.49837e-06, 6.78601e-06, 5.72067e-06, 4.44376e-06, 3.13840e-06, 1.97926e-06, 1.08791e-06, 5.02483e-07, 1.84385e-07, 1.84385e-07])
k52nll_050050025=bin_widths18*2*3000*np.array([3.55745e-06, 3.55745e-06, 4.67958e-06, 5.79565e-06, 6.82003e-06, 7.62671e-06, 8.11454e-06, 8.19093e-06, 7.80643e-06, 6.98170e-06, 5.80674e-06, 4.44415e-06, 3.08796e-06, 1.91136e-06, 1.02807e-06, 4.62678e-07, 1.64662e-07, 1.64662e-07])
k52nll_050050100=bin_widths18*2*3000*np.array([3.79080e-06, 3.79080e-06, 5.10713e-06, 6.47675e-06, 7.80210e-06, 8.94838e-06, 9.76048e-06, 1.01141e-05, 9.91779e-06, 9.13795e-06, 7.85072e-06, 6.22588e-06, 4.49958e-06, 2.91079e-06, 1.64769e-06, 7.87529e-07, 3.01070e-07, 3.01070e-07])
k52nll_025025050=bin_widths18*2*3000*np.array([3.40219e-06, 3.40219e-06, 4.58206e-06, 5.80882e-06, 6.99481e-06, 8.01932e-06, 8.74331e-06, 9.05588e-06, 8.87556e-06, 8.17316e-06, 7.01770e-06, 5.56176e-06, 4.01694e-06, 2.59675e-06, 1.46886e-06, 7.01532e-07, 2.67995e-07, 2.67995e-07])
k52nll_025050050=bin_widths18*2*3000*np.array([3.06761e-06, 3.06761e-06, 4.07115e-06, 5.06883e-06, 6.00475e-06, 6.76675e-06, 7.25497e-06, 7.37888e-06, 7.09598e-06, 6.40337e-06, 5.38208e-06, 4.16797e-06, 2.93442e-06, 1.84472e-06, 1.01069e-06, 4.65313e-07, 1.70205e-07, 1.70205e-07])
k52nll_050025050=bin_widths18*2*3000*np.array([3.53338e-06, 3.53338e-06, 4.77077e-06, 6.06307e-06, 7.31883e-06, 8.41148e-06, 9.19422e-06, 9.54804e-06, 9.38358e-06, 8.66558e-06, 7.46240e-06, 5.93214e-06, 4.29775e-06, 2.78708e-06, 1.58157e-06, 7.57785e-07, 2.90392e-07, 2.90392e-07])
k52nll_050100050=bin_widths18*2*3000*np.array([2.88295e-06, 2.88295e-06, 3.77490e-06, 4.65461e-06, 5.45466e-06, 6.07421e-06, 6.43544e-06, 6.46805e-06, 6.13753e-06, 5.46471e-06, 4.52452e-06, 3.44701e-06, 2.38411e-06, 1.46889e-06, 7.86444e-07, 3.52327e-07, 1.24835e-07, 1.24835e-07])
k52nll_100050050=bin_widths18*2*3000*np.array([3.35637e-06, 3.35637e-06, 4.48213e-06, 5.61516e-06, 6.69240e-06, 7.58827e-06, 8.18746e-06, 8.38221e-06, 8.11594e-06, 7.37564e-06, 6.24456e-06, 4.87224e-06, 3.45661e-06, 2.19000e-06, 1.20935e-06, 5.61176e-07, 2.06863e-07, 2.06863e-07])
k52nll_100100050=bin_widths18*2*3000*np.array([3.03677e-06, 3.03677e-06, 3.99121e-06, 4.93947e-06, 5.80954e-06, 6.49339e-06, 6.90576e-06, 6.96817e-06, 6.63912e-06, 5.93632e-06, 4.93642e-06, 3.77764e-06, 2.62472e-06, 1.62465e-06, 8.73925e-07, 3.93357e-07, 1.40016e-07, 1.40016e-07])



k62nll_centre=bin_widths18*2*3000*np.array([4.29932e-05, 4.29932e-05, 5.75816e-05, 7.27140e-05, 8.67832e-05, 9.83519e-05, 1.06050e-04, 1.08459e-04, 1.04735e-04, 9.49707e-05, 8.01320e-05, 6.23153e-05, 4.40449e-05, 2.78010e-05, 1.52865e-05, 7.06372e-06, 2.59413e-06, 2.59413e-06])
k62nll_min=bin_widths18*2*3000*np.array([3.88812e-05, 3.88812e-05, 5.13620e-05, 6.39536e-05, 7.53174e-05, 8.42168e-05, 8.94763e-05, 9.01962e-05, 8.57412e-05, 7.64490e-05, 6.33778e-05, 4.83435e-05, 3.34564e-05, 2.06294e-05, 1.10489e-05, 4.95358e-06, 1.75610e-06, 1.75610e-06])
k62nll_max=bin_widths18*2*3000*np.array([5.11777e-05, 5.11777e-05, 6.95271e-05, 8.91298e-05, 1.07915e-04, 1.24123e-04, 1.35826e-04, 1.41043e-04, 1.38561e-04, 1.27864e-04, 1.09993e-04, 8.73087e-05, 6.31474e-05, 4.08858e-05, 2.31503e-05, 1.10733e-05, 4.23476e-06, 4.23476e-06])

k62nll_050050050=bin_widths18*2*3000*np.array([4.29932e-05, 4.29932e-05, 5.75816e-05, 7.27140e-05, 8.67832e-05, 9.83519e-05, 1.06050e-04, 1.08459e-04, 1.04735e-04, 9.49707e-05, 8.01320e-05, 6.23153e-05, 4.40449e-05, 2.78010e-05, 1.52865e-05, 7.06372e-06, 2.59413e-06, 2.59413e-06])
k62nll_050050025=bin_widths18*2*3000*np.array([4.79970e-05, 4.79970e-05, 6.36900e-05, 7.96401e-05, 9.41847e-05, 1.05754e-04, 1.12831e-04, 1.14228e-04, 1.09062e-04, 9.76749e-05, 8.13410e-05, 6.23297e-05, 4.33345e-05, 2.68440e-05, 1.44436e-05, 6.50514e-06, 2.31638e-06, 2.31638e-06])
k62nll_050050100=bin_widths18*2*3000*np.array([5.11777e-05, 5.11777e-05, 6.95271e-05, 8.91298e-05, 1.07915e-04, 1.24123e-04, 1.35826e-04, 1.41043e-04, 1.38561e-04, 1.27864e-04, 1.09993e-04, 8.73087e-05, 6.31474e-05, 4.08858e-05, 2.31503e-05, 1.10733e-05, 4.23476e-06, 4.23476e-06])
k62nll_025025050=bin_widths18*2*3000*np.array([4.59310e-05, 4.59310e-05, 6.23771e-05, 7.99359e-05, 9.67493e-05, 1.11235e-04, 1.21670e-04, 1.26285e-04, 1.23999e-04, 1.14364e-04, 9.83219e-05, 7.79952e-05, 5.63737e-05, 3.64746e-05, 2.06377e-05, 9.86415e-06, 3.76952e-06, 3.76952e-06])
k62nll_025050050=bin_widths18*2*3000*np.array([4.14211e-05, 4.14211e-05, 5.53364e-05, 6.97073e-05, 8.29904e-05, 9.38190e-05, 1.00904e-04, 1.02920e-04, 9.91106e-05, 8.96135e-05, 7.53875e-05, 5.84469e-05, 4.11816e-05, 2.59110e-05, 1.42014e-05, 6.54117e-06, 2.39462e-06, 2.39462e-06])
k62nll_050025050=bin_widths18*2*3000*np.array([4.77093e-05, 4.77093e-05, 6.49547e-05, 8.34419e-05, 1.01238e-04, 1.16682e-04, 1.27952e-04, 1.33154e-04, 1.31101e-04, 1.21257e-04, 1.04554e-04, 8.31905e-05, 6.03154e-05, 3.91485e-05, 2.22215e-05, 1.06552e-05, 4.08458e-06, 4.08458e-06])
k62nll_050100050=bin_widths18*2*3000*np.array([3.88812e-05, 3.88812e-05, 5.13620e-05, 6.39536e-05, 7.53174e-05, 8.42168e-05, 8.94763e-05, 9.01962e-05, 8.57412e-05, 7.64490e-05, 6.33778e-05, 4.83435e-05, 3.34564e-05, 2.06294e-05, 1.10489e-05, 4.95358e-06, 1.75610e-06, 1.75610e-06])
k62nll_100050050=bin_widths18*2*3000*np.array([4.53369e-05, 4.53369e-05, 6.09446e-05, 7.72372e-05, 9.25125e-05, 1.05227e-04, 1.13887e-04, 1.16926e-04, 1.13367e-04, 1.03226e-04, 8.74730e-05, 6.83254e-05, 4.85117e-05, 3.07615e-05, 1.69931e-05, 7.88888e-06, 2.91040e-06, 2.91040e-06])
k62nll_100100050=bin_widths18*2*3000*np.array([4.09656e-05, 4.09656e-05, 5.43164e-05, 6.78767e-05, 8.02273e-05, 9.00376e-05, 9.60226e-05, 9.71765e-05, 9.27533e-05, 8.30496e-05, 6.91493e-05, 5.29817e-05, 3.68337e-05, 2.28173e-05, 1.22780e-05, 5.53049e-06, 1.96968e-06, 1.96968e-06])

kgk6nll_centre=bin_widths18*2*3000*np.array([-1.34881e-03, -1.34881e-03, -1.38737e-03, -1.35106e-03, -1.25095e-03, -1.09979e-03, -9.18067e-04, -7.24757e-04, -5.39317e-04, -3.75461e-04, -2.42969e-04, -1.44631e-04, -7.81771e-05, -3.77747e-05, -1.59134e-05, -5.66305e-06, -1.61233e-06, -1.61233e-06])
kgk6nll_min=bin_widths18*2*3000*np.array([-1.55094e-03, -1.55094e-03, -1.59793e-03, -1.58399e-03, -1.49087e-03, -1.33480e-03, -1.13393e-03, -9.12312e-04, -6.91949e-04, -4.91598e-04, -3.24977e-04, -1.97833e-04, -1.09601e-04, -5.43901e-05, -2.36344e-05, -8.71144e-06, -2.58914e-06, -2.58914e-06])
kgk6nll_max=bin_widths18*2*3000*np.array([-1.27433e-03, -1.27433e-03, -1.29121e-03, -1.23776e-03, -1.12805e-03, -9.75369e-04, -8.00448e-04, -6.21135e-04, -4.53736e-04, -3.10006e-04, -1.96633e-04, -1.14609e-04, -6.05772e-05, -2.85437e-05, -1.16946e-05, -4.03403e-06, -1.10574e-06, -1.10574e-06])




kgk6nll_050050050=bin_widths18*2*3000*np.array([-1.34881e-03, -1.34881e-03, -1.38737e-03, -1.35106e-03, -1.25095e-03, -1.09979e-03, -9.18067e-04, -7.24757e-04, -5.39317e-04, -3.75461e-04, -2.42969e-04, -1.44631e-04, -7.81771e-05, -3.77747e-05, -1.59134e-05, -5.66305e-06, -1.61233e-06, -1.61233e-06])
kgk6nll_050050025=bin_widths18*2*3000*np.array([-1.55094e-03, -1.55094e-03, -1.57929e-03, -1.52218e-03, -1.39439e-03, -1.21213e-03, -1.00005e-03, -7.80104e-04, -5.72968e-04, -3.93579e-04, -2.50979e-04, -1.47080e-04, -7.81564e-05, -3.70236e-05, -1.52483e-05, -5.28719e-06, -1.45637e-06, -1.45637e-06])
kgk6nll_050050100=bin_widths18*2*3000*np.array([-1.53031e-03, -1.53031e-03, -1.59793e-03, -1.58399e-03, -1.49087e-03, -1.33480e-03, -1.13393e-03, -9.12312e-04, -6.91949e-04, -4.91598e-04, -3.24977e-04, -1.97833e-04, -1.09601e-04, -5.43901e-05, -2.36344e-05, -8.71144e-06, -2.58914e-06, -2.58914e-06])
kgk6nll_025025050=bin_widths18*2*3000*np.array([-1.37521e-03, -1.37521e-03, -1.43509e-03, -1.42231e-03, -1.33812e-03, -1.19754e-03, -1.01685e-03, -8.17686e-04, -6.19821e-04, -4.40089e-04, -2.90727e-04, -1.76856e-04, -9.79055e-05, -4.85483e-05, -2.10790e-05, -7.76285e-06, -2.30525e-06, -2.30525e-06])
kgk6nll_025050050=bin_widths18*2*3000*np.array([-1.31014e-03, -1.31014e-03, -1.34388e-03, -1.30499e-03, -1.20477e-03, -1.05597e-03, -8.78733e-04, -6.91462e-04, -5.12831e-04, -3.55804e-04, -2.29445e-04, -1.36096e-04, -7.32981e-05, -3.52883e-05, -1.48116e-05, -5.25174e-06, -1.48988e-06, -1.48988e-06])
kgk6nll_050025050=bin_widths18*2*3000*np.array([-1.41642e-03, -1.41642e-03, -1.48219e-03, -1.47315e-03, -1.39001e-03, -1.24773e-03, -1.06277e-03, -8.57366e-04, -6.52054e-04, -4.64550e-04, -3.07955e-04, -1.88002e-04, -1.04451e-04, -5.19824e-05, -2.26526e-05, -8.37279e-06, -2.49527e-06, -2.49527e-06])
kgk6nll_050100050=bin_widths18*2*3000*np.array([-1.27433e-03, -1.27433e-03, -1.29121e-03, -1.23776e-03, -1.12805e-03, -9.75369e-04, -8.00448e-04, -6.21135e-04, -4.53736e-04, -3.10006e-04, -1.96633e-04, -1.14609e-04, -6.05772e-05, -2.85437e-05, -1.16946e-05, -4.03403e-06, -1.10574e-06, -1.10574e-06])
kgk6nll_100050050=bin_widths18*2*3000*np.array([-1.40534e-03, -1.40534e-03, -1.45138e-03, -1.41928e-03, -1.31977e-03, -1.16544e-03, -9.77331e-04, -7.75195e-04, -5.79653e-04, -4.05554e-04, -2.63778e-04, -1.57830e-04, -8.57590e-05, -4.16573e-05, -1.76420e-05, -6.31135e-06, -1.80620e-06, -1.80620e-06])
kgk6nll_100100050=bin_widths18*2*3000*np.array([-1.32707e-03, -1.32707e-03, -1.35009e-03, -1.29961e-03, -1.18952e-03, -1.03311e-03, -8.51742e-04, -6.64083e-04, -4.87480e-04, -3.34728e-04, -2.13399e-04, -1.25027e-04, -6.64313e-05, -3.14681e-05, -1.29612e-05, -4.49465e-06, -1.23840e-06, -1.23840e-06])


mass_scale=3.7#TeV




ktphoton_nll_050050050=((2000**2)/((mass_scale*1000)**2))*ktnll_050050050+ggnll_050050050+nlophoton_1
ktphoton_nll_050050025=((2000**2)/((mass_scale*1000)**2))*ktnll_050050025+ggnll_050050025+nlophoton_1
ktphoton_nll_050050100=((2000**2)/((mass_scale*1000)**2))*ktnll_050050100+ggnll_050050100+nlophoton_1
ktphoton_nll_025025050=((2000**2)/((mass_scale*1000)**2))*ktnll_025025050+ggnll_025025050+nlophoton_05
ktphoton_nll_025050050=((2000**2)/((mass_scale*1000)**2))*ktnll_025050050+ggnll_025050050+nlophoton_1
ktphoton_nll_050025050=((2000**2)/((mass_scale*1000)**2))*ktnll_050025050+ggnll_050025050+nlophoton_05
ktphoton_nll_050100050=((2000**2)/((mass_scale*1000)**2))*ktnll_050100050+ggnll_050100050+nlophoton_2
ktphoton_nll_100050050=((2000**2)/((mass_scale*1000)**2))*ktnll_100050050+ggnll_100050050+nlophoton_1
ktphoton_nll_100100050=((2000**2)/((mass_scale*1000)**2))*ktnll_100100050+ggnll_100100050+nlophoton_2


ktphoton_nll_min=[]
ktphoton_nll_max=[]

for i in range(0, len(ktphoton_nll_050050050)):
    values=[ktphoton_nll_050050050[i], ktphoton_nll_050050025[i], ktphoton_nll_050050100[i], ktphoton_nll_025025050[i], ktphoton_nll_025050050[i], ktphoton_nll_050025050[i], ktphoton_nll_050100050[i], ktphoton_nll_100050050[i], ktphoton_nll_100100050[i]]
    ktphoton_nll_min.append(np.min(values))
    ktphoton_nll_max.append(np.max(values))

ktphoton_nll_min=np.array(ktphoton_nll_min)
ktphoton_nll_max=np.array(ktphoton_nll_max)

ktphoton_nll_err=(ktphoton_nll_max-ktphoton_nll_min)/2

err_sm_kt=(err_qq**2 + ktphoton_nll_err**2)**0.5


sm_kt=nnllnnlonloew_centre+ktphoton_nll_050050050
sm_kt_min=sm_kt-err_sm_kt
sm_kt_max=sm_kt+err_sm_kt





kgphoton_nll_050050050=((2000**2)/((mass_scale*1000)**2))*kgnll_050050050+ggnll_050050050+nlophoton_1
kgphoton_nll_050050025=((2000**2)/((mass_scale*1000)**2))*kgnll_050050025+ggnll_050050025+nlophoton_1
kgphoton_nll_050050100=((2000**2)/((mass_scale*1000)**2))*kgnll_050050100+ggnll_050050100+nlophoton_1
kgphoton_nll_025025050=((2000**2)/((mass_scale*1000)**2))*kgnll_025025050+ggnll_025025050+nlophoton_05
kgphoton_nll_025050050=((2000**2)/((mass_scale*1000)**2))*kgnll_025050050+ggnll_025050050+nlophoton_1
kgphoton_nll_050025050=((2000**2)/((mass_scale*1000)**2))*kgnll_050025050+ggnll_050025050+nlophoton_05
kgphoton_nll_050100050=((2000**2)/((mass_scale*1000)**2))*kgnll_050100050+ggnll_050100050+nlophoton_2
kgphoton_nll_100050050=((2000**2)/((mass_scale*1000)**2))*kgnll_100050050+ggnll_100050050+nlophoton_1
kgphoton_nll_100100050=((2000**2)/((mass_scale*1000)**2))*kgnll_100100050+ggnll_100100050+nlophoton_2

print("kg")
print(kgnll_050050050/6000)
print(kgphoton_nll_050050050/6000)

kgphoton_nll_min=[]
kgphoton_nll_max=[]

for i in range(0, len(kgphoton_nll_050050050)):
    values=[kgphoton_nll_050050050[i], kgphoton_nll_050050025[i], kgphoton_nll_050050100[i], kgphoton_nll_025025050[i], kgphoton_nll_025050050[i], kgphoton_nll_050025050[i], kgphoton_nll_050100050[i], kgphoton_nll_100050050[i], kgphoton_nll_100100050[i]]
    kgphoton_nll_min.append(np.min(values))
    kgphoton_nll_max.append(np.max(values))

kgphoton_nll_min=np.array(kgphoton_nll_min)
kgphoton_nll_max=np.array(kgphoton_nll_max)

kgphoton_nll_err=(kgphoton_nll_max-kgphoton_nll_min)/2

err_sm_kg=(err_qq**2 + kgphoton_nll_err**2)**0.5


sm_kg=nnllnnlonloew_centre+kgphoton_nll_050050050
sm_kg_min=sm_kg-err_sm_kg
sm_kg_max=sm_kg+err_sm_kg

kgaltphoton_nll_050050050=((2000**2)/((mass_scale*1000)**2))*np.sqrt(kg2nll_050050050*ggnll_050050050)+ggnll_050050050+nlophoton_1
kgaltphoton_nll_050050025=((2000**2)/((mass_scale*1000)**2))*np.sqrt(kg2nll_050050025*ggnll_050050025)+ggnll_050050025+nlophoton_1
kgaltphoton_nll_050050100=((2000**2)/((mass_scale*1000)**2))*np.sqrt(kg2nll_050050100*ggnll_050050100)+ggnll_050050100+nlophoton_1
kgaltphoton_nll_025025050=((2000**2)/((mass_scale*1000)**2))*np.sqrt(kg2nll_025025050*ggnll_025025050)+ggnll_025025050+nlophoton_05
kgaltphoton_nll_025050050=((2000**2)/((mass_scale*1000)**2))*np.sqrt(kg2nll_025050050*ggnll_025050050)+ggnll_025050050+nlophoton_1
kgaltphoton_nll_050025050=((2000**2)/((mass_scale*1000)**2))*np.sqrt(kg2nll_050025050*ggnll_050025050)+ggnll_050025050+nlophoton_05
kgaltphoton_nll_050100050=((2000**2)/((mass_scale*1000)**2))*np.sqrt(kg2nll_050100050*ggnll_050100050)+ggnll_050100050+nlophoton_2
kgaltphoton_nll_100050050=((2000**2)/((mass_scale*1000)**2))*np.sqrt(kg2nll_100050050*ggnll_100050050)+ggnll_100050050+nlophoton_1
kgaltphoton_nll_100100050=((2000**2)/((mass_scale*1000)**2))*np.sqrt(kg2nll_100100050*ggnll_100100050)+ggnll_100100050+nlophoton_2


kgaltphoton_nll_min=[]
kgaltphoton_nll_max=[]

for i in range(0, len(kgaltphoton_nll_050050050)):
    values=[kgaltphoton_nll_050050050[i], kgaltphoton_nll_050050025[i], kgaltphoton_nll_050050100[i], kgaltphoton_nll_025025050[i], kgaltphoton_nll_025050050[i], kgaltphoton_nll_050025050[i], kgaltphoton_nll_050100050[i], kgaltphoton_nll_100050050[i], kgaltphoton_nll_100100050[i]]
    kgaltphoton_nll_min.append(np.min(values))
    kgaltphoton_nll_max.append(np.max(values))

kgaltphoton_nll_min=np.array(kgaltphoton_nll_min)
kgaltphoton_nll_max=np.array(kgaltphoton_nll_max)

kgaltphoton_nll_err=(kgaltphoton_nll_max-kgaltphoton_nll_min)/2

err_sm_kgalt=(err_qq**2 + kgaltphoton_nll_err**2)**0.5


sm_kgalt=nnllnnlonloew_centre+kgaltphoton_nll_050050050
sm_kgalt_min=sm_kgalt-err_sm_kgalt
sm_kgalt_max=sm_kgalt+err_sm_kgalt





kg2photon_nll_050050050=((2000**4)/((mass_scale*1000)**4))*kg2nll_050050050+ggnll_050050050+nlophoton_1
kg2photon_nll_050050025=((2000**4)/((mass_scale*1000)**4))*kg2nll_050050025+ggnll_050050025+nlophoton_1
kg2photon_nll_050050100=((2000**4)/((mass_scale*1000)**4))*kg2nll_050050100+ggnll_050050100+nlophoton_1
kg2photon_nll_025025050=((2000**4)/((mass_scale*1000)**4))*kg2nll_025025050+ggnll_025025050+nlophoton_05
kg2photon_nll_025050050=((2000**4)/((mass_scale*1000)**4))*kg2nll_025050050+ggnll_025050050+nlophoton_1
kg2photon_nll_050025050=((2000**4)/((mass_scale*1000)**4))*kg2nll_050025050+ggnll_050025050+nlophoton_05
kg2photon_nll_050100050=((2000**4)/((mass_scale*1000)**4))*kg2nll_050100050+ggnll_050100050+nlophoton_2
kg2photon_nll_100050050=((2000**4)/((mass_scale*1000)**4))*kg2nll_100050050+ggnll_100050050+nlophoton_1
kg2photon_nll_100100050=((2000**4)/((mass_scale*1000)**4))*kg2nll_100100050+ggnll_100100050+nlophoton_2


kg2photon_nll_min=[]
kg2photon_nll_max=[]

for i in range(0, len(kg2photon_nll_050050050)):
    values=[kg2photon_nll_050050050[i], kg2photon_nll_050050025[i], kg2photon_nll_050050100[i], kg2photon_nll_025025050[i], kg2photon_nll_025050050[i], kg2photon_nll_050025050[i], kg2photon_nll_050100050[i], kg2photon_nll_100050050[i], kg2photon_nll_100100050[i]]
    kg2photon_nll_min.append(np.min(values))
    kg2photon_nll_max.append(np.max(values))

kg2photon_nll_min=np.array(kg2photon_nll_min)
kg2photon_nll_max=np.array(kg2photon_nll_max)

kg2photon_nll_err=(kg2photon_nll_max-kg2photon_nll_min)/2

err_sm_kg2=(err_qq**2 + kg2photon_nll_err**2)**0.5


sm_kg2=nnllnnlonloew_centre+kg2photon_nll_050050050

print(nnllnnlonloew_centre)
print(ggphoton_nll_050050050)
sm_kg2_min=sm_kg2-err_sm_kg2
sm_kg2_max=sm_kg2+err_sm_kg2





k1photon_nll_050050050=((2000**4)/((mass_scale*1000)**4))*k1nll_050050050+ggnll_050050050+nlophoton_1
k1photon_nll_050050025=((2000**4)/((mass_scale*1000)**4))*k1nll_050050025+ggnll_050050025+nlophoton_1
k1photon_nll_050050100=((2000**4)/((mass_scale*1000)**4))*k1nll_050050100+ggnll_050050100+nlophoton_1
k1photon_nll_025025050=((2000**4)/((mass_scale*1000)**4))*k1nll_025025050+ggnll_025025050+nlophoton_05
k1photon_nll_025050050=((2000**4)/((mass_scale*1000)**4))*k1nll_025050050+ggnll_025050050+nlophoton_1
k1photon_nll_050025050=((2000**4)/((mass_scale*1000)**4))*k1nll_050025050+ggnll_050025050+nlophoton_05
k1photon_nll_050100050=((2000**4)/((mass_scale*1000)**4))*k1nll_050100050+ggnll_050100050+nlophoton_2
k1photon_nll_100050050=((2000**4)/((mass_scale*1000)**4))*k1nll_100050050+ggnll_100050050+nlophoton_1
k1photon_nll_100100050=((2000**4)/((mass_scale*1000)**4))*k1nll_100100050+ggnll_100100050+nlophoton_2


k1photon_nll_min=[]
k1photon_nll_max=[]

for i in range(0, len(k1photon_nll_050050050)):
    values=[k1photon_nll_050050050[i], k1photon_nll_050050025[i], k1photon_nll_050050100[i], k1photon_nll_025025050[i], k1photon_nll_025050050[i], k1photon_nll_050025050[i], k1photon_nll_050100050[i], k1photon_nll_100050050[i], k1photon_nll_100100050[i]]
    k1photon_nll_min.append(np.min(values))
    k1photon_nll_max.append(np.max(values))

k1photon_nll_min=np.array(k1photon_nll_min)
k1photon_nll_max=np.array(k1photon_nll_max)

k1photon_nll_err=(k1photon_nll_max-k1photon_nll_min)/2

err_sm_k1=(err_qq**2 + k1photon_nll_err**2)**0.5


sm_k1=nnllnnlonloew_centre+k1photon_nll_050050050
sm_k1_min=sm_k1-err_sm_k1
sm_k1_max=sm_k1+err_sm_k1



k2photon_nll_050050050=((2000**4)/((mass_scale*1000)**4))*k2nll_050050050+ggnll_050050050+nlophoton_1
k2photon_nll_050050025=((2000**4)/((mass_scale*1000)**4))*k2nll_050050025+ggnll_050050025+nlophoton_1
k2photon_nll_050050100=((2000**4)/((mass_scale*1000)**4))*k2nll_050050100+ggnll_050050100+nlophoton_1
k2photon_nll_025025050=((2000**4)/((mass_scale*1000)**4))*k2nll_025025050+ggnll_025025050+nlophoton_05
k2photon_nll_025050050=((2000**4)/((mass_scale*1000)**4))*k2nll_025050050+ggnll_025050050+nlophoton_1
k2photon_nll_050025050=((2000**4)/((mass_scale*1000)**4))*k2nll_050025050+ggnll_050025050+nlophoton_05
k2photon_nll_050100050=((2000**4)/((mass_scale*1000)**4))*k2nll_050100050+ggnll_050100050+nlophoton_2
k2photon_nll_100050050=((2000**4)/((mass_scale*1000)**4))*k2nll_100050050+ggnll_100050050+nlophoton_1
k2photon_nll_100100050=((2000**4)/((mass_scale*1000)**4))*k2nll_100100050+ggnll_100100050+nlophoton_2


k2photon_nll_min=[]
k2photon_nll_max=[]

for i in range(0, len(k2photon_nll_050050050)):
    values=[k2photon_nll_050050050[i], k2photon_nll_050050025[i], k2photon_nll_050050100[i], k2photon_nll_025025050[i], k2photon_nll_025050050[i], k2photon_nll_050025050[i], k2photon_nll_050100050[i], k2photon_nll_100050050[i], k2photon_nll_100100050[i]]
    k2photon_nll_min.append(np.min(values))
    k2photon_nll_max.append(np.max(values))

k2photon_nll_min=np.array(k2photon_nll_min)
k2photon_nll_max=np.array(k2photon_nll_max)

k2photon_nll_err=(k2photon_nll_max-k2photon_nll_min)/2

err_sm_k2=(err_qq**2 + k2photon_nll_err**2)**0.5


sm_k2=nnllnnlonloew_centre+k2photon_nll_050050050
sm_k2_min=sm_k2-err_sm_k2
sm_k2_max=sm_k2+err_sm_k2


k3photon_nll_050050050=((2000**4)/((mass_scale*1000)**4))*k3nll_050050050+ggnll_050050050+nlophoton_1
k3photon_nll_050050025=((2000**4)/((mass_scale*1000)**4))*k3nll_050050025+ggnll_050050025+nlophoton_1
k3photon_nll_050050100=((2000**4)/((mass_scale*1000)**4))*k3nll_050050100+ggnll_050050100+nlophoton_1
k3photon_nll_025025050=((2000**4)/((mass_scale*1000)**4))*k3nll_025025050+ggnll_025025050+nlophoton_05
k3photon_nll_025050050=((2000**4)/((mass_scale*1000)**4))*k3nll_025050050+ggnll_025050050+nlophoton_1
k3photon_nll_050025050=((2000**4)/((mass_scale*1000)**4))*k3nll_050025050+ggnll_050025050+nlophoton_05
k3photon_nll_050100050=((2000**4)/((mass_scale*1000)**4))*k3nll_050100050+ggnll_050100050+nlophoton_2
k3photon_nll_100050050=((2000**4)/((mass_scale*1000)**4))*k3nll_100050050+ggnll_100050050+nlophoton_1
k3photon_nll_100100050=((2000**4)/((mass_scale*1000)**4))*k3nll_100100050+ggnll_100100050+nlophoton_2


k3photon_nll_min=[]
k3photon_nll_max=[]

for i in range(0, len(k3photon_nll_050050050)):
    values=[k3photon_nll_050050050[i], k3photon_nll_050050025[i], k3photon_nll_050050100[i], k3photon_nll_025025050[i], k3photon_nll_025050050[i], k3photon_nll_050025050[i], k3photon_nll_050100050[i], k3photon_nll_100050050[i], k3photon_nll_100100050[i]]
    k3photon_nll_min.append(np.min(values))
    k3photon_nll_max.append(np.max(values))

k3photon_nll_min=np.array(k3photon_nll_min)
k3photon_nll_max=np.array(k3photon_nll_max)

k3photon_nll_err=(k3photon_nll_max-k3photon_nll_min)/2

err_sm_k3=(err_qq**2 + k3photon_nll_err**2)**0.5


sm_k3=nnllnnlonloew_centre+k3photon_nll_050050050
sm_k3_min=sm_k3-err_sm_k3
sm_k3_max=sm_k3+err_sm_k3


k4photon_nll_050050050=((2000**4)/((mass_scale*1000)**4))*k4nll_050050050+ggnll_050050050+nlophoton_1
k4photon_nll_050050025=((2000**4)/((mass_scale*1000)**4))*k4nll_050050025+ggnll_050050025+nlophoton_1
k4photon_nll_050050100=((2000**4)/((mass_scale*1000)**4))*k4nll_050050100+ggnll_050050100+nlophoton_1
k4photon_nll_025025050=((2000**4)/((mass_scale*1000)**4))*k4nll_025025050+ggnll_025025050+nlophoton_05
k4photon_nll_025050050=((2000**4)/((mass_scale*1000)**4))*k4nll_025050050+ggnll_025050050+nlophoton_1
k4photon_nll_050025050=((2000**4)/((mass_scale*1000)**4))*k4nll_050025050+ggnll_050025050+nlophoton_05
k4photon_nll_050100050=((2000**4)/((mass_scale*1000)**4))*k4nll_050100050+ggnll_050100050+nlophoton_2
k4photon_nll_100050050=((2000**4)/((mass_scale*1000)**4))*k4nll_100050050+ggnll_100050050+nlophoton_1
k4photon_nll_100100050=((2000**4)/((mass_scale*1000)**4))*k4nll_100100050+ggnll_100100050+nlophoton_2


k4photon_nll_min=[]
k4photon_nll_max=[]

for i in range(0, len(k4photon_nll_050050050)):
    values=[k4photon_nll_050050050[i], k4photon_nll_050050025[i], k4photon_nll_050050100[i], k4photon_nll_025025050[i], k4photon_nll_025050050[i], k4photon_nll_050025050[i], k4photon_nll_050100050[i], k4photon_nll_100050050[i], k4photon_nll_100100050[i]]
    k4photon_nll_min.append(np.min(values))
    k4photon_nll_max.append(np.max(values))

k4photon_nll_min=np.array(k4photon_nll_min)
k4photon_nll_max=np.array(k4photon_nll_max)

k4photon_nll_err=(k4photon_nll_max-k4photon_nll_min)/2

err_sm_k4=(err_qq**2 + k4photon_nll_err**2)**0.5


sm_k4=nnllnnlonloew_centre+k4photon_nll_050050050
sm_k4_min=sm_k4-err_sm_k4
sm_k4_max=sm_k4+err_sm_k4


k5photon_nll_050050050=((2000**4)/((mass_scale*1000)**4))*k5nll_050050050+ggnll_050050050+nlophoton_1
k5photon_nll_050050025=((2000**4)/((mass_scale*1000)**4))*k5nll_050050025+ggnll_050050025+nlophoton_1
k5photon_nll_050050100=((2000**4)/((mass_scale*1000)**4))*k5nll_050050100+ggnll_050050100+nlophoton_1
k5photon_nll_025025050=((2000**4)/((mass_scale*1000)**4))*k5nll_025025050+ggnll_025025050+nlophoton_05
k5photon_nll_025050050=((2000**4)/((mass_scale*1000)**4))*k5nll_025050050+ggnll_025050050+nlophoton_1
k5photon_nll_050025050=((2000**4)/((mass_scale*1000)**4))*k5nll_050025050+ggnll_050025050+nlophoton_05
k5photon_nll_050100050=((2000**4)/((mass_scale*1000)**4))*k5nll_050100050+ggnll_050100050+nlophoton_2
k5photon_nll_100050050=((2000**4)/((mass_scale*1000)**4))*k5nll_100050050+ggnll_100050050+nlophoton_1
k5photon_nll_100100050=((2000**4)/((mass_scale*1000)**4))*k5nll_100100050+ggnll_100100050+nlophoton_2


k5photon_nll_min=[]
k5photon_nll_max=[]

for i in range(0, len(k5photon_nll_050050050)):
    values=[k5photon_nll_050050050[i], k5photon_nll_050050025[i], k5photon_nll_050050100[i], k5photon_nll_025025050[i], k5photon_nll_025050050[i], k5photon_nll_050025050[i], k5photon_nll_050100050[i], k5photon_nll_100050050[i], k5photon_nll_100100050[i]]
    k5photon_nll_min.append(np.min(values))
    k5photon_nll_max.append(np.max(values))

k5photon_nll_min=np.array(k5photon_nll_min)
k5photon_nll_max=np.array(k5photon_nll_max)

k5photon_nll_err=(k5photon_nll_max-k5photon_nll_min)/2

err_sm_k5=(err_qq**2 + k5photon_nll_err**2)**0.5


sm_k5=nnllnnlonloew_centre+k5photon_nll_050050050
sm_k5_min=sm_k5-err_sm_k5
sm_k5_max=sm_k5+err_sm_k5


k6photon_nll_050050050=((2000**4)/((mass_scale*1000)**4))*k6nll_050050050+ggnll_050050050+nlophoton_1
k6photon_nll_050050025=((2000**4)/((mass_scale*1000)**4))*k6nll_050050025+ggnll_050050025+nlophoton_1
k6photon_nll_050050100=((2000**4)/((mass_scale*1000)**4))*k6nll_050050100+ggnll_050050100+nlophoton_1
k6photon_nll_025025050=((2000**4)/((mass_scale*1000)**4))*k6nll_025025050+ggnll_025025050+nlophoton_05
k6photon_nll_025050050=((2000**4)/((mass_scale*1000)**4))*k6nll_025050050+ggnll_025050050+nlophoton_1
k6photon_nll_050025050=((2000**4)/((mass_scale*1000)**4))*k6nll_050025050+ggnll_050025050+nlophoton_05
k6photon_nll_050100050=((2000**4)/((mass_scale*1000)**4))*k6nll_050100050+ggnll_050100050+nlophoton_2
k6photon_nll_100050050=((2000**4)/((mass_scale*1000)**4))*k6nll_100050050+ggnll_100050050+nlophoton_1
k6photon_nll_100100050=((2000**4)/((mass_scale*1000)**4))*k6nll_100100050+ggnll_100100050+nlophoton_2


k6photon_nll_min=[]
k6photon_nll_max=[]

for i in range(0, len(k6photon_nll_050050050)):
    values=[k6photon_nll_050050050[i], k6photon_nll_050050025[i], k6photon_nll_050050100[i], k6photon_nll_025025050[i], k6photon_nll_025050050[i], k6photon_nll_050025050[i], k6photon_nll_050100050[i], k6photon_nll_100050050[i], k6photon_nll_100100050[i]]
    k6photon_nll_min.append(np.min(values))
    k6photon_nll_max.append(np.max(values))

k6photon_nll_min=np.array(k6photon_nll_min)
k6photon_nll_max=np.array(k6photon_nll_max)

k6photon_nll_err=(k6photon_nll_max-k6photon_nll_min)/2

err_sm_k6=(err_qq**2 + k6photon_nll_err**2)**0.5


sm_k6=nnllnnlonloew_centre+k6photon_nll_050050050
sm_k6_min=sm_k6-err_sm_k6
sm_k6_max=sm_k6+err_sm_k6


k12photon_nll_050050050=((2000**8)/((mass_scale*1000)**8))*k12nll_050050050+ggnll_050050050+nlophoton_1
k12photon_nll_050050025=((2000**8)/((mass_scale*1000)**8))*k12nll_050050025+ggnll_050050025+nlophoton_1
k12photon_nll_050050100=((2000**8)/((mass_scale*1000)**8))*k12nll_050050100+ggnll_050050100+nlophoton_1
k12photon_nll_025025050=((2000**8)/((mass_scale*1000)**8))*k12nll_025025050+ggnll_025025050+nlophoton_05
k12photon_nll_025050050=((2000**8)/((mass_scale*1000)**8))*k12nll_025050050+ggnll_025050050+nlophoton_1
k12photon_nll_050025050=((2000**8)/((mass_scale*1000)**8))*k12nll_050025050+ggnll_050025050+nlophoton_05
k12photon_nll_050100050=((2000**8)/((mass_scale*1000)**8))*k12nll_050100050+ggnll_050100050+nlophoton_2
k12photon_nll_100050050=((2000**8)/((mass_scale*1000)**8))*k12nll_100050050+ggnll_100050050+nlophoton_1
k12photon_nll_100100050=((2000**8)/((mass_scale*1000)**8))*k12nll_100100050+ggnll_100100050+nlophoton_2


k12photon_nll_min=[]
k12photon_nll_max=[]

for i in range(0, len(k12photon_nll_050050050)):
    values=[k12photon_nll_050050050[i], k12photon_nll_050050025[i], k12photon_nll_050050100[i], k12photon_nll_025025050[i], k12photon_nll_025050050[i], k12photon_nll_050025050[i], k12photon_nll_050100050[i], k12photon_nll_100050050[i], k12photon_nll_100100050[i]]
    k12photon_nll_min.append(np.min(values))
    k12photon_nll_max.append(np.max(values))

k12photon_nll_min=np.array(k12photon_nll_min)
k12photon_nll_max=np.array(k12photon_nll_max)

k12photon_nll_err=(k12photon_nll_max-k12photon_nll_min)/2

err_sm_k12=(err_qq**2 + k12photon_nll_err**2)**0.5


sm_k12=nnllnnlonloew_centre+k12photon_nll_050050050
sm_k12_min=sm_k12-err_sm_k12
sm_k12_max=sm_k12+err_sm_k12

k22photon_nll_050050050=((2000**8)/((mass_scale*1000)**8))*k22nll_050050050+ggnll_050050050+nlophoton_1
k22photon_nll_050050025=((2000**8)/((mass_scale*1000)**8))*k22nll_050050025+ggnll_050050025+nlophoton_1
k22photon_nll_050050100=((2000**8)/((mass_scale*1000)**8))*k22nll_050050100+ggnll_050050100+nlophoton_1
k22photon_nll_025025050=((2000**8)/((mass_scale*1000)**8))*k22nll_025025050+ggnll_025025050+nlophoton_05
k22photon_nll_025050050=((2000**8)/((mass_scale*1000)**8))*k22nll_025050050+ggnll_025050050+nlophoton_1
k22photon_nll_050025050=((2000**8)/((mass_scale*1000)**8))*k22nll_050025050+ggnll_050025050+nlophoton_05
k22photon_nll_050100050=((2000**8)/((mass_scale*1000)**8))*k22nll_050100050+ggnll_050100050+nlophoton_2
k22photon_nll_100050050=((2000**8)/((mass_scale*1000)**8))*k22nll_100050050+ggnll_100050050+nlophoton_1
k22photon_nll_100100050=((2000**8)/((mass_scale*1000)**8))*k22nll_100100050+ggnll_100100050+nlophoton_2


k22photon_nll_min=[]
k22photon_nll_max=[]

for i in range(0, len(k22photon_nll_050050050)):
    values=[k22photon_nll_050050050[i], k22photon_nll_050050025[i], k22photon_nll_050050100[i], k22photon_nll_025025050[i], k22photon_nll_025050050[i], k22photon_nll_050025050[i], k22photon_nll_050100050[i], k22photon_nll_100050050[i], k22photon_nll_100100050[i]]
    k22photon_nll_min.append(np.min(values))
    k22photon_nll_max.append(np.max(values))

k22photon_nll_min=np.array(k22photon_nll_min)
k22photon_nll_max=np.array(k22photon_nll_max)

k22photon_nll_err=(k22photon_nll_max-k22photon_nll_min)/2

err_sm_k22=(err_qq**2 + k22photon_nll_err**2)**0.5


sm_k22=nnllnnlonloew_centre+k22photon_nll_050050050
sm_k22_min=sm_k22-err_sm_k22
sm_k22_max=sm_k22+err_sm_k22




k32photon_nll_050050050=((2000**8)/((mass_scale*1000)**8))*k32nll_050050050+ggnll_050050050+nlophoton_1
k32photon_nll_050050025=((2000**8)/((mass_scale*1000)**8))*k32nll_050050025+ggnll_050050025+nlophoton_1
k32photon_nll_050050100=((2000**8)/((mass_scale*1000)**8))*k32nll_050050100+ggnll_050050100+nlophoton_1
k32photon_nll_025025050=((2000**8)/((mass_scale*1000)**8))*k32nll_025025050+ggnll_025025050+nlophoton_05
k32photon_nll_025050050=((2000**8)/((mass_scale*1000)**8))*k32nll_025050050+ggnll_025050050+nlophoton_1
k32photon_nll_050025050=((2000**8)/((mass_scale*1000)**8))*k32nll_050025050+ggnll_050025050+nlophoton_05
k32photon_nll_050100050=((2000**8)/((mass_scale*1000)**8))*k32nll_050100050+ggnll_050100050+nlophoton_2
k32photon_nll_100050050=((2000**8)/((mass_scale*1000)**8))*k32nll_100050050+ggnll_100050050+nlophoton_1
k32photon_nll_100100050=((2000**8)/((mass_scale*1000)**8))*k32nll_100100050+ggnll_100100050+nlophoton_2


k32photon_nll_min=[]
k32photon_nll_max=[]

for i in range(0, len(k32photon_nll_050050050)):
    values=[k32photon_nll_050050050[i], k32photon_nll_050050025[i], k32photon_nll_050050100[i], k32photon_nll_025025050[i], k32photon_nll_025050050[i], k32photon_nll_050025050[i], k32photon_nll_050100050[i], k32photon_nll_100050050[i], k32photon_nll_100100050[i]]
    k32photon_nll_min.append(np.min(values))
    k32photon_nll_max.append(np.max(values))

k32photon_nll_min=np.array(k32photon_nll_min)
k32photon_nll_max=np.array(k32photon_nll_max)

k32photon_nll_err=(k32photon_nll_max-k32photon_nll_min)/2

err_sm_k32=(err_qq**2 + k32photon_nll_err**2)**0.5


sm_k32=nnllnnlonloew_centre+k32photon_nll_050050050
sm_k32_min=sm_k32-err_sm_k32
sm_k32_max=sm_k32+err_sm_k32



k3altphoton_nll_050050050=((2000**4)/((mass_scale*1000)**4))*np.sqrt(k32nll_050050050*ggnll_050050050)+ggnll_050050050+nlophoton_1
k3altphoton_nll_050050025=((2000**4)/((mass_scale*1000)**4))*np.sqrt(k32nll_050050025*ggnll_050050025)+ggnll_050050025+nlophoton_1
k3altphoton_nll_050050100=((2000**4)/((mass_scale*1000)**4))*np.sqrt(k32nll_050050100*ggnll_050050100)+ggnll_050050100+nlophoton_1
k3altphoton_nll_025025050=((2000**4)/((mass_scale*1000)**4))*np.sqrt(k32nll_025025050*ggnll_025025050)+ggnll_025025050+nlophoton_05
k3altphoton_nll_025050050=((2000**4)/((mass_scale*1000)**4))*np.sqrt(k32nll_025050050*ggnll_025050050)+ggnll_025050050+nlophoton_1
k3altphoton_nll_050025050=((2000**4)/((mass_scale*1000)**4))*np.sqrt(k32nll_050025050*ggnll_050025050)+ggnll_050025050+nlophoton_05
k3altphoton_nll_050100050=((2000**4)/((mass_scale*1000)**4))*np.sqrt(k32nll_050100050*ggnll_050100050)+ggnll_050100050+nlophoton_2
k3altphoton_nll_100050050=((2000**4)/((mass_scale*1000)**4))*np.sqrt(k32nll_100050050*ggnll_100050050)+ggnll_100050050+nlophoton_1
k3altphoton_nll_100100050=((2000**4)/((mass_scale*1000)**4))*np.sqrt(k32nll_100100050*ggnll_100100050)+ggnll_100100050+nlophoton_2


k3altphoton_nll_min=[]
k3altphoton_nll_max=[]

for i in range(0, len(k3altphoton_nll_050050050)):
    values=[k3altphoton_nll_050050050[i], k3altphoton_nll_050050025[i], k3altphoton_nll_050050100[i], k3altphoton_nll_025025050[i], k3altphoton_nll_025050050[i], k3altphoton_nll_050025050[i], k3altphoton_nll_050100050[i], k3altphoton_nll_100050050[i], k3altphoton_nll_100100050[i]]
    k3altphoton_nll_min.append(np.min(values))
    k3altphoton_nll_max.append(np.max(values))

k3altphoton_nll_min=np.array(k3altphoton_nll_min)
k3altphoton_nll_max=np.array(k3altphoton_nll_max)

k3altphoton_nll_err=(k3altphoton_nll_max-k3altphoton_nll_min)/2

err_sm_k3alt=(err_qq**2 + k3altphoton_nll_err**2)**0.5


sm_k3alt=nnllnnlonloew_centre+k3altphoton_nll_050050050
sm_k3alt_min=sm_k3alt-err_sm_k3alt
sm_k3alt_max=sm_k3alt+err_sm_k3alt



k42photon_nll_050050050=((2000**8)/((mass_scale*1000)**8))*k42nll_050050050+ggnll_050050050+nlophoton_1
k42photon_nll_050050025=((2000**8)/((mass_scale*1000)**8))*k42nll_050050025+ggnll_050050025+nlophoton_1
k42photon_nll_050050100=((2000**8)/((mass_scale*1000)**8))*k42nll_050050100+ggnll_050050100+nlophoton_1
k42photon_nll_025025050=((2000**8)/((mass_scale*1000)**8))*k42nll_025025050+ggnll_025025050+nlophoton_05
k42photon_nll_025050050=((2000**8)/((mass_scale*1000)**8))*k42nll_025050050+ggnll_025050050+nlophoton_1
k42photon_nll_050025050=((2000**8)/((mass_scale*1000)**8))*k42nll_050025050+ggnll_050025050+nlophoton_05
k42photon_nll_050100050=((2000**8)/((mass_scale*1000)**8))*k42nll_050100050+ggnll_050100050+nlophoton_2
k42photon_nll_100050050=((2000**8)/((mass_scale*1000)**8))*k42nll_100050050+ggnll_100050050+nlophoton_1
k42photon_nll_100100050=((2000**8)/((mass_scale*1000)**8))*k42nll_100100050+ggnll_100100050+nlophoton_2


k42photon_nll_min=[]
k42photon_nll_max=[]

for i in range(0, len(k42photon_nll_050050050)):
    values=[k42photon_nll_050050050[i], k42photon_nll_050050025[i], k42photon_nll_050050100[i], k42photon_nll_025025050[i], k42photon_nll_025050050[i], k42photon_nll_050025050[i], k42photon_nll_050100050[i], k42photon_nll_100050050[i], k42photon_nll_100100050[i]]
    k42photon_nll_min.append(np.min(values))
    k42photon_nll_max.append(np.max(values))

k42photon_nll_min=np.array(k42photon_nll_min)
k42photon_nll_max=np.array(k42photon_nll_max)

k42photon_nll_err=(k42photon_nll_max-k42photon_nll_min)/2

err_sm_k42=(err_qq**2 + k42photon_nll_err**2)**0.5


sm_k42=nnllnnlonloew_centre+k42photon_nll_050050050
sm_k42_min=sm_k42-err_sm_k42
sm_k42_max=sm_k42+err_sm_k42



k52photon_nll_050050050=((2000**8)/((mass_scale*1000)**8))*k52nll_050050050+ggnll_050050050+nlophoton_1
k52photon_nll_050050025=((2000**8)/((mass_scale*1000)**8))*k52nll_050050025+ggnll_050050025+nlophoton_1
k52photon_nll_050050100=((2000**8)/((mass_scale*1000)**8))*k52nll_050050100+ggnll_050050100+nlophoton_1
k52photon_nll_025025050=((2000**8)/((mass_scale*1000)**8))*k52nll_025025050+ggnll_025025050+nlophoton_05
k52photon_nll_025050050=((2000**8)/((mass_scale*1000)**8))*k52nll_025050050+ggnll_025050050+nlophoton_1
k52photon_nll_050025050=((2000**8)/((mass_scale*1000)**8))*k52nll_050025050+ggnll_050025050+nlophoton_05
k52photon_nll_050100050=((2000**8)/((mass_scale*1000)**8))*k52nll_050100050+ggnll_050100050+nlophoton_2
k52photon_nll_100050050=((2000**8)/((mass_scale*1000)**8))*k52nll_100050050+ggnll_100050050+nlophoton_1
k52photon_nll_100100050=((2000**8)/((mass_scale*1000)**8))*k52nll_100100050+ggnll_100100050+nlophoton_2


k52photon_nll_min=[]
k52photon_nll_max=[]

for i in range(0, len(k52photon_nll_050050050)):
    values=[k52photon_nll_050050050[i], k52photon_nll_050050025[i], k52photon_nll_050050100[i], k52photon_nll_025025050[i], k52photon_nll_025050050[i], k52photon_nll_050025050[i], k52photon_nll_050100050[i], k52photon_nll_100050050[i], k52photon_nll_100100050[i]]
    k52photon_nll_min.append(np.min(values))
    k52photon_nll_max.append(np.max(values))

k52photon_nll_min=np.array(k52photon_nll_min)
k52photon_nll_max=np.array(k52photon_nll_max)

k52photon_nll_err=(k52photon_nll_max-k52photon_nll_min)/2

err_sm_k52=(err_qq**2 + k52photon_nll_err**2)**0.5


sm_k52=nnllnnlonloew_centre+k52photon_nll_050050050
sm_k52_min=sm_k52-err_sm_k52
sm_k52_max=sm_k52+err_sm_k52


k62photon_nll_050050050=((2000**8)/((mass_scale*1000)**8))*k62nll_050050050+ggnll_050050050+nlophoton_1
k62photon_nll_050050025=((2000**8)/((mass_scale*1000)**8))*k62nll_050050025+ggnll_050050025+nlophoton_1
k62photon_nll_050050100=((2000**8)/((mass_scale*1000)**8))*k62nll_050050100+ggnll_050050100+nlophoton_1
k62photon_nll_025025050=((2000**8)/((mass_scale*1000)**8))*k62nll_025025050+ggnll_025025050+nlophoton_05
k62photon_nll_025050050=((2000**8)/((mass_scale*1000)**8))*k62nll_025050050+ggnll_025050050+nlophoton_1
k62photon_nll_050025050=((2000**8)/((mass_scale*1000)**8))*k62nll_050025050+ggnll_050025050+nlophoton_05
k62photon_nll_050100050=((2000**8)/((mass_scale*1000)**8))*k62nll_050100050+ggnll_050100050+nlophoton_2
k62photon_nll_100050050=((2000**8)/((mass_scale*1000)**8))*k62nll_100050050+ggnll_100050050+nlophoton_1
k62photon_nll_100100050=((2000**8)/((mass_scale*1000)**8))*k62nll_100100050+ggnll_100100050+nlophoton_2


k62photon_nll_min=[]
k62photon_nll_max=[]

for i in range(0, len(k62photon_nll_050050050)):
    values=[k62photon_nll_050050050[i], k62photon_nll_050050025[i], k62photon_nll_050050100[i], k62photon_nll_025025050[i], k62photon_nll_025050050[i], k62photon_nll_050025050[i], k62photon_nll_050100050[i], k62photon_nll_100050050[i], k62photon_nll_100100050[i]]
    k62photon_nll_min.append(np.min(values))
    k62photon_nll_max.append(np.max(values))

k62photon_nll_min=np.array(k62photon_nll_min)
k62photon_nll_max=np.array(k62photon_nll_max)

k62photon_nll_err=(k62photon_nll_max-k62photon_nll_min)/2

err_sm_k62=(err_qq**2 + k62photon_nll_err**2)**0.5


sm_k62=nnllnnlonloew_centre+k62photon_nll_050050050
sm_k62_min=sm_k62-err_sm_k62
sm_k62_max=sm_k62+err_sm_k62


kgk6photon_nll_050050050=((2000**6)/((mass_scale*1000)**6))*abs(kgk6nll_050050050)+ggnll_050050050+nlophoton_1
kgk6photon_nll_050050025=((2000**6)/((mass_scale*1000)**6))*abs(kgk6nll_050050025)+ggnll_050050025+nlophoton_1
kgk6photon_nll_050050100=((2000**6)/((mass_scale*1000)**6))*abs(kgk6nll_050050100)+ggnll_050050100+nlophoton_1
kgk6photon_nll_025025050=((2000**6)/((mass_scale*1000)**6))*abs(kgk6nll_025025050)+ggnll_025025050+nlophoton_05
kgk6photon_nll_025050050=((2000**6)/((mass_scale*1000)**6))*abs(kgk6nll_025050050)+ggnll_025050050+nlophoton_1
kgk6photon_nll_050025050=((2000**6)/((mass_scale*1000)**6))*abs(kgk6nll_050025050)+ggnll_050025050+nlophoton_05
kgk6photon_nll_050100050=((2000**6)/((mass_scale*1000)**6))*abs(kgk6nll_050100050)+ggnll_050100050+nlophoton_2
kgk6photon_nll_100050050=((2000**6)/((mass_scale*1000)**6))*abs(kgk6nll_100050050)+ggnll_100050050+nlophoton_1
kgk6photon_nll_100100050=((2000**6)/((mass_scale*1000)**6))*abs(kgk6nll_100100050)+ggnll_100100050+nlophoton_2


kgk6photon_nll_min=[]
kgk6photon_nll_max=[]

for i in range(0, len(kgk6photon_nll_050050050)):
    values=[kgk6photon_nll_050050050[i], kgk6photon_nll_050050025[i], kgk6photon_nll_050050100[i], kgk6photon_nll_025025050[i], kgk6photon_nll_025050050[i], kgk6photon_nll_050025050[i], kgk6photon_nll_050100050[i], kgk6photon_nll_100050050[i], kgk6photon_nll_100100050[i]]
    kgk6photon_nll_min.append(np.min(values))
    kgk6photon_nll_max.append(np.max(values))

kgk6photon_nll_min=np.array(kgk6photon_nll_min)
kgk6photon_nll_max=np.array(kgk6photon_nll_max)

kgk6photon_nll_err=(kgk6photon_nll_max-kgk6photon_nll_min)/2

err_sm_kgk6=(err_qq**2 + kgk6photon_nll_err**2)**0.5


sm_kgk6=nnllnnlonloew_centre+kgk6photon_nll_050050050
sm_kgk6_min=sm_kgk6-err_sm_kgk6
sm_kgk6_max=sm_kgk6+err_sm_kgk6

plt.figure()
plt.step(bin_centres, sm/sm, color='k', where='mid', label=r'\mathrm{SM}')
plt.fill_between(bin_centres, sm_min/sm, sm_max/sm,
                     color='k', alpha=0.2, step='mid')

plt.step(bin_centres, sm_kg2/sm, color='r', where='mid', label=r'\mathrm{SM} + $|A_{Og}|^2$ $\Lambda=$'+str(mass_scale)+r'TeV')
plt.fill_between(bin_centres, sm_kg2_min/sm, sm_kg2_max/sm,
                     color='r', alpha=0.2, step='mid')

plt.step(bin_centres, sm_k1/sm, color='g', where='mid', label=r'\mathrm{SM} + $2\mathrm{Re} (A_{sm}A^*_1 )$ $\Lambda=$'+str(mass_scale)+r'TeV')
plt.fill_between(bin_centres, sm_k1_min/sm, sm_k1_max/sm,
                     color='g', alpha=0.2, step='mid')

plt.step(bin_centres, sm_k12/sm, color='b', where='mid', label=r'\mathrm{SM}  + $|A_1|^2$ $\Lambda=$'+str(mass_scale)+r'TeV')
plt.fill_between(bin_centres, sm_k12_min/sm, sm_k12_max/sm,
                     color='b', alpha=0.2, step='mid')

plt.semilogx()
plt.xlim(200,4000)
#plt.ylim(0.8,1.2) 
plt.legend(loc="upper left")            
plt.tight_layout()
plt.savefig("kgk12.pdf")


plt.figure()
plt.step(bin_centres, sm/sm, color='k', where='mid', label=r'\mathrm{SM}')
plt.fill_between(bin_centres, sm_min/sm, sm_max/sm,
                     color='k', alpha=0.2, step='mid')

plt.step(bin_centres, sm_kg2/sm, color='r', where='mid', label=r'\mathrm{SM} + $|A_{Og}|^2$ $\Lambda=$'+str(mass_scale)+r'TeV')
plt.fill_between(bin_centres, sm_kg2_min/sm, sm_kg2_max/sm,
                     color='r', alpha=0.2, step='mid')

plt.step(bin_centres, sm_k2/sm, color='g', where='mid', label=r'\mathrm{SM} + $2\mathrm{Re} (A_{sm}A^*_2 )$ $\Lambda=$'+str(mass_scale)+r'TeV')
plt.fill_between(bin_centres, sm_k2_min/sm, sm_k2_max/sm,
                     color='g', alpha=0.2, step='mid')

plt.step(bin_centres, sm_k22/sm, color='b', where='mid', label=r'\mathrm{SM}  + $|A_2|^2$ $\Lambda=$'+str(mass_scale)+r'TeV')
plt.fill_between(bin_centres, sm_k22_min/sm, sm_k22_max/sm,
                     color='b', alpha=0.2, step='mid')

plt.semilogx()
plt.xlim(200,4000) 
#plt.ylim(0.8,1.2) 
plt.legend(loc="upper left")            
plt.tight_layout()
plt.savefig("kgk22.pdf")




plt.rcParams["hatch.linewidth"] = 4






plt.figure(figsize=(20, 15),dpi=100)
#fig, ax = plt.subplots()

fig, axs = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, sharex=True)

rec1 = plt.Rectangle((3700/4,-0.2),4000-3700/4,2.2, facecolor="#d3d3d3", 
                     edgecolor="white", hatch=r"\\", zorder=0)

rec2 = plt.Rectangle((3700/4,-0.2),4000-3700/4,2.2, facecolor="#d3d3d3", 
                     edgecolor="white", hatch=r"\\", zorder=0)
axs[0].add_patch(rec2)
axs[0].annotate(r'$\Lambda=$'+str(mass_scale)+r' TeV', (220, 1.5),\
               fontsize=16,color="#3b3b3b")

#axs[0].annotate(r'EFT Breakdown', (3700/4 + 10, 0.75),\
#               fontsize=14,color="#3b3b3b")

axs[0].step(bin_centres, sm/sm, color='k', where='mid', label=r'$|\mathcal{M}_{\mathrm{SM}}|^2$')
axs[0].fill_between(bin_centres, sm_min/sm, sm_max/sm,
                     color='k', alpha=0.2, step='mid')

axs[0].step(bin_centres, sm_kg/sm, color='r', linestyle="--", where='mid', label=r'$|\mathcal{M}_{\mathrm{SM}}|^2 + \frac{2c_{GH}}{\Lambda^2}2\mathrm{Re}\left(\mathcal{M}^{(gg)}_{\mathrm{SM}}\overline{\mathcal{M}_{g}}^{(6)\ *}\right)$')

#axs[0].step(bin_centres, sm_kgalt/sm, color='orange', linestyle="--", where='mid', label=r'\mathrm{SM} + $|A_{Og}|^2$ $\Lambda=$'+str(mass_scale)+r'TeV')


axs[0].step(bin_centres, sm_kg2/sm, color='r', where='mid', label=r'$|\mathcal{M}_{\mathrm{SM}}|^2 + \frac{c^2_{GH}}{\Lambda^4}|\overline{\mathcal{M}^{(6)}_{g}}|^2$')
#axs[0].fill_between(bin_centres, sm_kg2_min/sm, sm_kg2_max/sm,
#                     color='r', alpha=0.2, step='mid')

#axs[0].step(bin_centres, sm_k3alt/sm, color='g', linestyle="--", where='mid', label=r'\mathrm{SM} + $2\mathrm{Re} (A_{sm}A^*_3 )$ $\Lambda=$'+str(mass_scale)+r'TeV')
#axs[0].fill_between(bin_centres, sm_k3alt_min/sm, sm_k3alt_max/sm,
#                     color='g', alpha=0.2, step='mid')

#axs[0].step(bin_centres, sm_k3/sm, color='g', where='mid', label=r'\mathrm{SM} + $2\mathrm{Re} (A_{sm}A^*_3 )$ $\Lambda=$'+str(mass_scale)+r'TeV')
#axs[0].fill_between(bin_centres, sm_k3_min/sm, sm_k3_max/sm,
#                     color='g', alpha=0.2, step='mid')

#axs[0].step(bin_centres, sm_kgk6/sm, color='b', linestyle="--", where='mid', label=r'\mathrm{SM}  + $2\mathrm{Re} (A_{Og}A^*_6 )$ $\Lambda=$'+str(mass_scale)+r'TeV')

axs[0].step(bin_centres, sm_k3/sm, color='b', linestyle="--", where='mid', label=r'$|\mathcal{M}_{\mathrm{SM}}|^2 + \frac{2c_3}{\Lambda^4}2\mathrm{Re}\left(\mathcal{M}^{(gg)}_{\mathrm{SM}}\mathcal{M}_3^{(8)\ *}\right)$')


axs[0].step(bin_centres, sm_k32/sm, color='b', where='mid', label=r'$|\mathcal{M}_{\mathrm{SM}}|^2 + \frac{c^2_3}{\Lambda^8}|\mathcal{M}^{(8)}_3|^2$')
#axs[0].fill_between(bin_centres, sm_k32_min/sm, sm_k32_max/sm,
#                     color='b', alpha=0.2, step='mid')

#axs[0].plot([1000*mass_scale/4, 1000*mass_scale/4], [0, 2], color="grey", linestyle="--", label=r'$M_{e\mu}^{\mathrm{Max}} = \frac{\Lambda}{4}$')

axs[0].semilogx()
axs[0].set_xlim(200,4000) 
axs[0].set_ylim(-0.2,2) 
axs[1].set_xlabel(r"$M_{e\mu}$ $\left[\mathrm{GeV}\right]$ ",\
               fontsize=16,color="black")
axs[0].set_ylabel(r"Ratio to SM",\
               fontsize=16,color="black")
axs[0].legend(loc="lower left", fontsize=9.5, ncol=2)    
axs[0].tick_params(which="both", labelsize=14, direction='in', right=True, top=True, pad=10)

axs[1].add_patch(rec1)


axs[1].step(bin_centres, sm/sm, color='k', where='mid', label=r'$|\mathcal{M}_{\mathrm{SM}}|^2$')
axs[1].fill_between(bin_centres, sm_min/sm, sm_max/sm,
                     color='k', alpha=0.2, step='mid')

axs[1].step(bin_centres, sm_kg/sm, color='r', linestyle="--", where='mid', label=r'$|\mathcal{M}_{\mathrm{SM}}|^2 + \frac{2c_{GH}}{\Lambda^2}2\mathrm{Re}\left(\mathcal{M}^{gg}_{\mathrm{SM}}\overline{\mathcal{M}_{g}}^*\right)$')

axs[1].step(bin_centres, sm_kg2/sm, color='r', where='mid', label=r'$|\mathcal{M}_{\mathrm{SM}}|^2 + \frac{c^2_{GH}}{\Lambda^4}|\overline{\mathcal{M}_{g}}|^2$')

axs[1].step(bin_centres, sm_k3/sm, color='b', linestyle="--", where='mid', label=r'$|\mathcal{M}_{\mathrm{SM}}|^2 + \frac{2c_3}{\Lambda^4}2\mathrm{Re}\left(\mathcal{M}^{gg}_{\mathrm{SM}}\overline{\mathcal{M}_3}^*\right)$')


axs[1].step(bin_centres, sm_k32/sm, color='b', where='mid', label=r'$|\mathcal{M}_{\mathrm{SM}}|^2 + \frac{c^2_3}{\Lambda^8}|\mathcal{M}_3|^2$')

axs[1].set_ylim(0.9,1.1) 
#ax.set_xticks([200, 1000, 4000])
#ax.set_xticklabels([r"$200$", r"$1000$", r"$4000$"])
#ax.axis.major_ticks.set_tick_out(False)

axs[1].set_xticks([200, 1000, 4000])

axs[1].tick_params(which="both", labelsize=14, direction='in', right=True, top=True, pad=10)
axs[1].set_xticklabels(labels=[r"$200$", r"$1000$", r"$4000$"])




plt.tight_layout()

plt.savefig("kgk32.pdf")



plt.figure()
plt.step(bin_centres, sm/sm, color='k', where='mid', label=r'\mathrm{SM}')
plt.fill_between(bin_centres, sm_min/sm, sm_max/sm,
                     color='k', alpha=0.2, step='mid')

plt.step(bin_centres, sm_kg2/sm, color='r', where='mid', label=r'\mathrm{SM} + $|A_{Og}|^2$ $\Lambda=$'+str(mass_scale)+r'TeV')
plt.fill_between(bin_centres, sm_kg2_min/sm, sm_kg2_max/sm,
                     color='r', alpha=0.2, step='mid')

plt.step(bin_centres, sm_k4/sm, color='g', where='mid', label=r'\mathrm{SM} + $2\mathrm{Re} (A_{sm}A^*_4 )$ $\Lambda=$'+str(mass_scale)+r'TeV')
plt.fill_between(bin_centres, sm_k4_min/sm, sm_k4_max/sm,
                     color='g', alpha=0.2, step='mid')

plt.step(bin_centres, sm_k42/sm, color='b', where='mid', label=r'\mathrm{SM}  + $|A_4|^2$ $\Lambda=$'+str(mass_scale)+r'TeV')
plt.fill_between(bin_centres, sm_k42_min/sm, sm_k42_max/sm,
                     color='b', alpha=0.2, step='mid')

plt.semilogx()
plt.xlim(200,4000) 
#plt.ylim(0.8,1.2) 
plt.legend(loc="upper left")            
plt.tight_layout()
plt.savefig("kgk42.pdf")



plt.figure()
plt.step(bin_centres, sm/sm, color='k', where='mid', label=r'\mathrm{SM}')
plt.fill_between(bin_centres, sm_min/sm, sm_max/sm,
                     color='k', alpha=0.2, step='mid')

plt.step(bin_centres, sm_kg2/sm, color='r', where='mid', label=r'\mathrm{SM} + $|A_{Og}|^2$ $\Lambda=$'+str(mass_scale)+r'TeV')
plt.fill_between(bin_centres, sm_kg2_min/sm, sm_kg2_max/sm,
                     color='r', alpha=0.2, step='mid')

plt.step(bin_centres, sm_k5/sm, color='g', where='mid', label=r'\mathrm{SM} + $2\mathrm{Re} (A_{sm}A^*_5 )$ $\Lambda=$'+str(mass_scale)+r'TeV')
plt.fill_between(bin_centres, sm_k5_min/sm, sm_k5_max/sm,
                     color='g', alpha=0.2, step='mid')

plt.step(bin_centres, sm_k52/sm, color='b', where='mid', label=r'\mathrm{SM}  + $|A_5|^2$ $\Lambda=$'+str(mass_scale)+r'TeV')
plt.fill_between(bin_centres, sm_k52_min/sm, sm_k52_max/sm,
                     color='b', alpha=0.2, step='mid')

plt.semilogx()
plt.xlim(200,4000)
#plt.ylim(0.8,1.2)  
plt.legend(loc="upper left")            
plt.tight_layout()
plt.savefig("kgk52.pdf")

plt.figure()
plt.step(bin_centres, sm/sm, color='k', where='mid', label=r'\mathrm{SM}')
plt.fill_between(bin_centres, sm_min/sm, sm_max/sm,
                     color='k', alpha=0.2, step='mid')

plt.step(bin_centres, sm_kg2/sm, color='r', where='mid', label=r'\mathrm{SM} + $|A_{Og}|^2$ $\Lambda=$'+str(mass_scale)+r'TeV')
plt.fill_between(bin_centres, sm_kg2_min/sm, sm_kg2_max/sm,
                     color='r', alpha=0.2, step='mid')

plt.step(bin_centres, sm_k6/sm, color='g', where='mid', label=r'\mathrm{SM} + $2\mathrm{Re} (A_{sm}A^*_6 )$ $\Lambda=$'+str(mass_scale)+r'TeV')
plt.fill_between(bin_centres, sm_k6_min/sm, sm_k6_max/sm,
                     color='g', alpha=0.2, step='mid')

plt.step(bin_centres, sm_k62/sm, color='b', where='mid', label=r'\mathrm{SM}  + $|A_6|^2$ $\Lambda=$'+str(mass_scale)+r'TeV')
plt.fill_between(bin_centres, sm_k62_min/sm, sm_k62_max/sm,
                     color='b', alpha=0.2, step='mid')

plt.semilogx()
plt.xlim(200,4000) 
#plt.ylim(0.8,1.2) 
plt.legend(loc="upper left")            
plt.tight_layout()
plt.savefig("kgk62.pdf")



mass_scale=2.5

k3photon_nll_050050050=((2000**4)/((mass_scale*1000)**4))*k3nll_050050050+ggnll_050050050+nlophoton_1
k3photon_nll_050050025=((2000**4)/((mass_scale*1000)**4))*k3nll_050050025+ggnll_050050025+nlophoton_1
k3photon_nll_050050100=((2000**4)/((mass_scale*1000)**4))*k3nll_050050100+ggnll_050050100+nlophoton_1
k3photon_nll_025025050=((2000**4)/((mass_scale*1000)**4))*k3nll_025025050+ggnll_025025050+nlophoton_05
k3photon_nll_025050050=((2000**4)/((mass_scale*1000)**4))*k3nll_025050050+ggnll_025050050+nlophoton_1
k3photon_nll_050025050=((2000**4)/((mass_scale*1000)**4))*k3nll_050025050+ggnll_050025050+nlophoton_05
k3photon_nll_050100050=((2000**4)/((mass_scale*1000)**4))*k3nll_050100050+ggnll_050100050+nlophoton_2
k3photon_nll_100050050=((2000**4)/((mass_scale*1000)**4))*k3nll_100050050+ggnll_100050050+nlophoton_1
k3photon_nll_100100050=((2000**4)/((mass_scale*1000)**4))*k3nll_100100050+ggnll_100100050+nlophoton_2


k3photon_nll_min=[]
k3photon_nll_max=[]

for i in range(0, len(k3photon_nll_050050050)):
    values=[k3photon_nll_050050050[i], k3photon_nll_050050025[i], k3photon_nll_050050100[i], k3photon_nll_025025050[i], k3photon_nll_025050050[i], k3photon_nll_050025050[i], k3photon_nll_050100050[i], k3photon_nll_100050050[i], k3photon_nll_100100050[i]]
    k3photon_nll_min.append(np.min(values))
    k3photon_nll_max.append(np.max(values))

k3photon_nll_min=np.array(k3photon_nll_min)
k3photon_nll_max=np.array(k3photon_nll_max)

k3photon_nll_err=(k3photon_nll_max-k3photon_nll_min)/2

err_sm_k3=(err_qq**2 + k3photon_nll_err**2)**0.5


sm_k3_3=nnllnnlonloew_centre+k3photon_nll_050050050
sm_k3_3_min=sm_k3_3 -err_sm_k3
sm_k3_3_max=sm_k3_3 +err_sm_k3




k32photon_nll_050050050=((2000**8)/((mass_scale*1000)**8))*k32nll_050050050+ggnll_050050050+nlophoton_1
k32photon_nll_050050025=((2000**8)/((mass_scale*1000)**8))*k32nll_050050025+ggnll_050050025+nlophoton_1
k32photon_nll_050050100=((2000**8)/((mass_scale*1000)**8))*k32nll_050050100+ggnll_050050100+nlophoton_1
k32photon_nll_025025050=((2000**8)/((mass_scale*1000)**8))*k32nll_025025050+ggnll_025025050+nlophoton_05
k32photon_nll_025050050=((2000**8)/((mass_scale*1000)**8))*k32nll_025050050+ggnll_025050050+nlophoton_1
k32photon_nll_050025050=((2000**8)/((mass_scale*1000)**8))*k32nll_050025050+ggnll_050025050+nlophoton_05
k32photon_nll_050100050=((2000**8)/((mass_scale*1000)**8))*k32nll_050100050+ggnll_050100050+nlophoton_2
k32photon_nll_100050050=((2000**8)/((mass_scale*1000)**8))*k32nll_100050050+ggnll_100050050+nlophoton_1
k32photon_nll_100100050=((2000**8)/((mass_scale*1000)**8))*k32nll_100100050+ggnll_100100050+nlophoton_2


k32photon_nll_min=[]
k32photon_nll_max=[]

for i in range(0, len(k32photon_nll_050050050)):
    values=[k32photon_nll_050050050[i], k32photon_nll_050050025[i], k32photon_nll_050050100[i], k32photon_nll_025025050[i], k32photon_nll_025050050[i], k32photon_nll_050025050[i], k32photon_nll_050100050[i], k32photon_nll_100050050[i], k32photon_nll_100100050[i]]
    k32photon_nll_min.append(np.min(values))
    k32photon_nll_max.append(np.max(values))

k32photon_nll_min=np.array(k32photon_nll_min)
k32photon_nll_max=np.array(k32photon_nll_max)

k32photon_nll_err=(k32photon_nll_max-k32photon_nll_min)/2

err_sm_k32=(err_qq**2 + k32photon_nll_err**2)**0.5


sm_k32_3=nnllnnlonloew_centre+k32photon_nll_050050050
sm_k32_3_min=sm_k32_3 -err_sm_k32
sm_k32_3_max=sm_k32_3 +err_sm_k32

mass_scale=6

k3photon_nll_050050050=((2000**4)/((mass_scale*1000)**4))*k3nll_050050050+ggnll_050050050+nlophoton_1
k3photon_nll_050050025=((2000**4)/((mass_scale*1000)**4))*k3nll_050050025+ggnll_050050025+nlophoton_1
k3photon_nll_050050100=((2000**4)/((mass_scale*1000)**4))*k3nll_050050100+ggnll_050050100+nlophoton_1
k3photon_nll_025025050=((2000**4)/((mass_scale*1000)**4))*k3nll_025025050+ggnll_025025050+nlophoton_05
k3photon_nll_025050050=((2000**4)/((mass_scale*1000)**4))*k3nll_025050050+ggnll_025050050+nlophoton_1
k3photon_nll_050025050=((2000**4)/((mass_scale*1000)**4))*k3nll_050025050+ggnll_050025050+nlophoton_05
k3photon_nll_050100050=((2000**4)/((mass_scale*1000)**4))*k3nll_050100050+ggnll_050100050+nlophoton_2
k3photon_nll_100050050=((2000**4)/((mass_scale*1000)**4))*k3nll_100050050+ggnll_100050050+nlophoton_1
k3photon_nll_100100050=((2000**4)/((mass_scale*1000)**4))*k3nll_100100050+ggnll_100100050+nlophoton_2


k3photon_nll_min=[]
k3photon_nll_max=[]

for i in range(0, len(k3photon_nll_050050050)):
    values=[k3photon_nll_050050050[i], k3photon_nll_050050025[i], k3photon_nll_050050100[i], k3photon_nll_025025050[i], k3photon_nll_025050050[i], k3photon_nll_050025050[i], k3photon_nll_050100050[i], k3photon_nll_100050050[i], k3photon_nll_100100050[i]]
    k3photon_nll_min.append(np.min(values))
    k3photon_nll_max.append(np.max(values))

k3photon_nll_min=np.array(k3photon_nll_min)
k3photon_nll_max=np.array(k3photon_nll_max)

k3photon_nll_err=(k3photon_nll_max-k3photon_nll_min)/2

err_sm_k3=(err_qq**2 + k3photon_nll_err**2)**0.5


sm_k3_6=nnllnnlonloew_centre+k3photon_nll_050050050
sm_k3_6_min=sm_k3_6-err_sm_k3
sm_k3_6_max=sm_k3_6+err_sm_k3



k32photon_nll_050050050=((2000**8)/((mass_scale*1000)**8))*k32nll_050050050+ggnll_050050050+nlophoton_1
k32photon_nll_050050025=((2000**8)/((mass_scale*1000)**8))*k32nll_050050025+ggnll_050050025+nlophoton_1
k32photon_nll_050050100=((2000**8)/((mass_scale*1000)**8))*k32nll_050050100+ggnll_050050100+nlophoton_1
k32photon_nll_025025050=((2000**8)/((mass_scale*1000)**8))*k32nll_025025050+ggnll_025025050+nlophoton_05
k32photon_nll_025050050=((2000**8)/((mass_scale*1000)**8))*k32nll_025050050+ggnll_025050050+nlophoton_1
k32photon_nll_050025050=((2000**8)/((mass_scale*1000)**8))*k32nll_050025050+ggnll_050025050+nlophoton_05
k32photon_nll_050100050=((2000**8)/((mass_scale*1000)**8))*k32nll_050100050+ggnll_050100050+nlophoton_2
k32photon_nll_100050050=((2000**8)/((mass_scale*1000)**8))*k32nll_100050050+ggnll_100050050+nlophoton_1
k32photon_nll_100100050=((2000**8)/((mass_scale*1000)**8))*k32nll_100100050+ggnll_100100050+nlophoton_2


k32photon_nll_min=[]
k32photon_nll_max=[]

for i in range(0, len(k32photon_nll_050050050)):
    values=[k32photon_nll_050050050[i], k32photon_nll_050050025[i], k32photon_nll_050050100[i], k32photon_nll_025025050[i], k32photon_nll_025050050[i], k32photon_nll_050025050[i], k32photon_nll_050100050[i], k32photon_nll_100050050[i], k32photon_nll_100100050[i]]
    k32photon_nll_min.append(np.min(values))
    k32photon_nll_max.append(np.max(values))

k32photon_nll_min=np.array(k32photon_nll_min)
k32photon_nll_max=np.array(k32photon_nll_max)

k32photon_nll_err=(k32photon_nll_max-k32photon_nll_min)/2

err_sm_k32=(err_qq**2 + k32photon_nll_err**2)**0.5


sm_k32_6=nnllnnlonloew_centre+k32photon_nll_050050050
sm_k32_6_min=sm_k32_6-err_sm_k32
sm_k32_6_max=sm_k32_6+err_sm_k32

mass_scale=9

k3photon_nll_050050050=((2000**4)/((mass_scale*1000)**4))*k3nll_050050050+ggnll_050050050+nlophoton_1
k3photon_nll_050050025=((2000**4)/((mass_scale*1000)**4))*k3nll_050050025+ggnll_050050025+nlophoton_1
k3photon_nll_050050100=((2000**4)/((mass_scale*1000)**4))*k3nll_050050100+ggnll_050050100+nlophoton_1
k3photon_nll_025025050=((2000**4)/((mass_scale*1000)**4))*k3nll_025025050+ggnll_025025050+nlophoton_05
k3photon_nll_025050050=((2000**4)/((mass_scale*1000)**4))*k3nll_025050050+ggnll_025050050+nlophoton_1
k3photon_nll_050025050=((2000**4)/((mass_scale*1000)**4))*k3nll_050025050+ggnll_050025050+nlophoton_05
k3photon_nll_050100050=((2000**4)/((mass_scale*1000)**4))*k3nll_050100050+ggnll_050100050+nlophoton_2
k3photon_nll_100050050=((2000**4)/((mass_scale*1000)**4))*k3nll_100050050+ggnll_100050050+nlophoton_1
k3photon_nll_100100050=((2000**4)/((mass_scale*1000)**4))*k3nll_100100050+ggnll_100100050+nlophoton_2


k3photon_nll_min=[]
k3photon_nll_max=[]

for i in range(0, len(k3photon_nll_050050050)):
    values=[k3photon_nll_050050050[i], k3photon_nll_050050025[i], k3photon_nll_050050100[i], k3photon_nll_025025050[i], k3photon_nll_025050050[i], k3photon_nll_050025050[i], k3photon_nll_050100050[i], k3photon_nll_100050050[i], k3photon_nll_100100050[i]]
    k3photon_nll_min.append(np.min(values))
    k3photon_nll_max.append(np.max(values))

k3photon_nll_min=np.array(k3photon_nll_min)
k3photon_nll_max=np.array(k3photon_nll_max)

k3photon_nll_err=(k3photon_nll_max-k3photon_nll_min)/2

err_sm_k3=(err_qq**2 + k3photon_nll_err**2)**0.5


sm_k3_9=nnllnnlonloew_centre+k3photon_nll_050050050
sm_k3_9_min=sm_k3_9-err_sm_k3
sm_k3_9_max=sm_k3_9+err_sm_k3



k32photon_nll_050050050=((2000**8)/((mass_scale*1000)**8))*k32nll_050050050+ggnll_050050050+nlophoton_1
k32photon_nll_050050025=((2000**8)/((mass_scale*1000)**8))*k32nll_050050025+ggnll_050050025+nlophoton_1
k32photon_nll_050050100=((2000**8)/((mass_scale*1000)**8))*k32nll_050050100+ggnll_050050100+nlophoton_1
k32photon_nll_025025050=((2000**8)/((mass_scale*1000)**8))*k32nll_025025050+ggnll_025025050+nlophoton_05
k32photon_nll_025050050=((2000**8)/((mass_scale*1000)**8))*k32nll_025050050+ggnll_025050050+nlophoton_1
k32photon_nll_050025050=((2000**8)/((mass_scale*1000)**8))*k32nll_050025050+ggnll_050025050+nlophoton_05
k32photon_nll_050100050=((2000**8)/((mass_scale*1000)**8))*k32nll_050100050+ggnll_050100050+nlophoton_2
k32photon_nll_100050050=((2000**8)/((mass_scale*1000)**8))*k32nll_100050050+ggnll_100050050+nlophoton_1
k32photon_nll_100100050=((2000**8)/((mass_scale*1000)**8))*k32nll_100100050+ggnll_100100050+nlophoton_2


k32photon_nll_min=[]
k32photon_nll_max=[]

for i in range(0, len(k32photon_nll_050050050)):
    values=[k32photon_nll_050050050[i], k32photon_nll_050050025[i], k32photon_nll_050050100[i], k32photon_nll_025025050[i], k32photon_nll_025050050[i], k32photon_nll_050025050[i], k32photon_nll_050100050[i], k32photon_nll_100050050[i], k32photon_nll_100100050[i]]
    k32photon_nll_min.append(np.min(values))
    k32photon_nll_max.append(np.max(values))

k32photon_nll_min=np.array(k32photon_nll_min)
k32photon_nll_max=np.array(k32photon_nll_max)

k32photon_nll_err=(k32photon_nll_max-k32photon_nll_min)/2

err_sm_k32=(err_qq**2 + k32photon_nll_err**2)**0.5


sm_k32_9=nnllnnlonloew_centre+k32photon_nll_050050050
sm_k32_9_min=sm_k32_9-err_sm_k32
sm_k32_9_max=sm_k32_9+err_sm_k32


plt.figure()
plt.step(bin_centres, sm/sm, color='k', where='mid', label=r'\mathrm{SM}')
plt.fill_between(bin_centres, sm_min/sm, sm_max/sm,
                     color='k', alpha=0.2, step='mid')

plt.step(bin_centres, sm_k3_3/sm, color='r', where='mid', label=r'\mathrm{SM} + $2\mathrm{Re} (A_{sm}A^*_3 )$')
plt.fill_between(bin_centres, sm_k3_3_min/sm, sm_k3_3_max/sm,
                     color='r', alpha=0.2, step='mid')

plt.step(bin_centres, sm_k32_3/sm, color='r', where='mid', label=r'\mathrm{SM}  + $|A_3|^2$')
plt.fill_between(bin_centres, sm_k32_3_min/sm, sm_k32_3_max/sm,
                     color='r', alpha=0.2, step='mid')

plt.step(bin_centres, sm_k3_6/sm, color='g', where='mid', label=r'\mathrm{SM} + $2\mathrm{Re} (A_{sm}A^*_3 )$')
plt.fill_between(bin_centres, sm_k3_6_min/sm, sm_k3_6_max/sm,
                     color='g', alpha=0.2, step='mid')

plt.step(bin_centres, sm_k32_6/sm, color='g', where='mid', label=r'\mathrm{SM}  + $|A_3|^2$')
plt.fill_between(bin_centres, sm_k32_6_min/sm, sm_k32_6_max/sm,
                     color='g', alpha=0.2, step='mid')

plt.step(bin_centres, sm_k3_9/sm, color='b', where='mid', label=r'\mathrm{SM} + $2\mathrm{Re} (A_{sm}A^*_3 )$')
plt.fill_between(bin_centres, sm_k3_9_min/sm, sm_k3_9_max/sm,
                     color='b', alpha=0.2, step='mid')

plt.step(bin_centres, sm_k32_9/sm, color='b', where='mid', label=r'\mathrm{SM}  + $|A_3|^2$')
plt.fill_between(bin_centres, sm_k32_9_min/sm, sm_k32_9_max/sm,
                     color='b', alpha=0.2, step='mid')

plt.loglog()
plt.xlim(200,4000) 
plt.legend(loc="upper left")            
plt.tight_layout()
plt.savefig("k32.pdf")



mass_scale=0.15#TeV




ktphoton_nll_050050050=-1*((2000**2)/((mass_scale*1000)**2))*ktnll_050050050+ggnll_050050050+nlophoton_1
ktphoton_nll_050050025=-1*((2000**2)/((mass_scale*1000)**2))*ktnll_050050025+ggnll_050050025+nlophoton_1
ktphoton_nll_050050100=-1*((2000**2)/((mass_scale*1000)**2))*ktnll_050050100+ggnll_050050100+nlophoton_1
ktphoton_nll_025025050=-1*((2000**2)/((mass_scale*1000)**2))*ktnll_025025050+ggnll_025025050+nlophoton_05
ktphoton_nll_025050050=-1*((2000**2)/((mass_scale*1000)**2))*ktnll_025050050+ggnll_025050050+nlophoton_1
ktphoton_nll_050025050=-1*((2000**2)/((mass_scale*1000)**2))*ktnll_050025050+ggnll_050025050+nlophoton_05
ktphoton_nll_050100050=-1*((2000**2)/((mass_scale*1000)**2))*ktnll_050100050+ggnll_050100050+nlophoton_2
ktphoton_nll_100050050=-1*((2000**2)/((mass_scale*1000)**2))*ktnll_100050050+ggnll_100050050+nlophoton_1
ktphoton_nll_100100050=-1*((2000**2)/((mass_scale*1000)**2))*ktnll_100100050+ggnll_100100050+nlophoton_2


ktphoton_nll_min=[]
ktphoton_nll_max=[]

for i in range(0, len(ktphoton_nll_050050050)):
    values=[ktphoton_nll_050050050[i], ktphoton_nll_050050025[i], ktphoton_nll_050050100[i], ktphoton_nll_025025050[i], ktphoton_nll_025050050[i], ktphoton_nll_050025050[i], ktphoton_nll_050100050[i], ktphoton_nll_100050050[i], ktphoton_nll_100100050[i]]
    ktphoton_nll_min.append(np.min(values))
    ktphoton_nll_max.append(np.max(values))

ktphoton_nll_min=np.array(ktphoton_nll_min)
ktphoton_nll_max=np.array(ktphoton_nll_max)

ktphoton_nll_err=(ktphoton_nll_max-ktphoton_nll_min)/2

err_sm_kt=(err_qq**2 + ktphoton_nll_err**2)**0.5


sm_kt=nnllnnlonloew_centre+ktphoton_nll_050050050
sm_kt_min=sm_kt-err_sm_kt
sm_kt_max=sm_kt+err_sm_kt


mass_scale=0.3


kgphoton_nll_050050050=((2000**2)/((mass_scale*1000)**2))*kgnll_050050050+ggnll_050050050+nlophoton_1
kgphoton_nll_050050025=((2000**2)/((mass_scale*1000)**2))*kgnll_050050025+ggnll_050050025+nlophoton_1
kgphoton_nll_050050100=((2000**2)/((mass_scale*1000)**2))*kgnll_050050100+ggnll_050050100+nlophoton_1
kgphoton_nll_025025050=((2000**2)/((mass_scale*1000)**2))*kgnll_025025050+ggnll_025025050+nlophoton_05
kgphoton_nll_025050050=((2000**2)/((mass_scale*1000)**2))*kgnll_025050050+ggnll_025050050+nlophoton_1
kgphoton_nll_050025050=((2000**2)/((mass_scale*1000)**2))*kgnll_050025050+ggnll_050025050+nlophoton_05
kgphoton_nll_050100050=((2000**2)/((mass_scale*1000)**2))*kgnll_050100050+ggnll_050100050+nlophoton_2
kgphoton_nll_100050050=((2000**2)/((mass_scale*1000)**2))*kgnll_100050050+ggnll_100050050+nlophoton_1
kgphoton_nll_100100050=((2000**2)/((mass_scale*1000)**2))*kgnll_100100050+ggnll_100100050+nlophoton_2


kgphoton_nll_min=[]
kgphoton_nll_max=[]

for i in range(0, len(kgphoton_nll_050050050)):
    values=[kgphoton_nll_050050050[i], kgphoton_nll_050050025[i], kgphoton_nll_050050100[i], kgphoton_nll_025025050[i], kgphoton_nll_025050050[i], kgphoton_nll_050025050[i], kgphoton_nll_050100050[i], kgphoton_nll_100050050[i], kgphoton_nll_100100050[i]]
    kgphoton_nll_min.append(np.min(values))
    kgphoton_nll_max.append(np.max(values))

kgphoton_nll_min=np.array(kgphoton_nll_min)
kgphoton_nll_max=np.array(kgphoton_nll_max)

kgphoton_nll_err=(kgphoton_nll_max-kgphoton_nll_min)/2

err_sm_kg=(err_qq**2 + kgphoton_nll_err**2)**0.5


sm_kg=nnllnnlonloew_centre+kgphoton_nll_050050050
sm_kg_min=sm_kg-err_sm_kg
sm_kg_max=sm_kg+err_sm_kg


plt.figure(dpi=1000)
plt.step(bin_centres, sm/3000, color='k', where='mid', label=r'$\mathcal{M}_{\mathrm{SM}}$')
plt.fill_between(bin_centres, sm_min/3000, sm_max/3000,
                     color='k', alpha=0.2, step='mid')

plt.step(bin_centres, sm_kg/3000, color='r', where='mid', label=r'$\mathcal{M}_{\mathrm{SM}}$ + $\kappa_1\,2\mathrm{Re}\left(\mathcal{M}_{\mathrm{SM}}\mathcal{M}^{1\,*}_6\right)$ ')
plt.fill_between(bin_centres, sm_kg_min/3000, sm_kg_max/3000,
                     color='r', alpha=0.2, step='mid')



plt.step(bin_centres, sm_kt/3000, color='b', where='mid', label=r'$\mathcal{M}_{\mathrm{SM}}$ + $\kappa_2\,2\mathrm{Re}\left(\mathcal{M}_{\mathrm{SM}}\mathcal{M}^{2\,*}_6\right)$ ')
plt.fill_between(bin_centres, sm_kt_min/3000, sm_kt_max/3000,
                     color='b', alpha=0.2, step='mid')

plt.loglog()
plt.xlim(200,1078.597) 
#plt.xlim(200,894.4272) 

plt.ylim(500/3000,110000/3000) 
plt.ylabel(r"$\sigma\,$ [fb]", fontsize=16)
plt.xlabel(r"$M$ [GeV]", fontsize=16)
plt.legend(loc="lower left", fontsize=13)  
#plt.minorticks_off()  
#plt.xticks([10**3], fontsize=16)
plt.xticks(fontsize=16)
plt.yticks(fontsize=16)     
plt.grid(which="both", alpha=0.3)   
plt.tight_layout()
plt.savefig("ktkg.pdf")
